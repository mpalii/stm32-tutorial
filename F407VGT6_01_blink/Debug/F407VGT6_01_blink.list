
F407VGT6_01_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a30  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008bb8  08008bb8  00009bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bd4  08008bd4  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008bd4  08008bd4  00009bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bdc  08008bdc  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bdc  08008bdc  00009bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008be0  08008be0  00009be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008be4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a1c  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001498c  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000384d  00000000  00000000  0001ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00022288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d20  00000000  00000000  000233c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023469  00000000  00000000  000240e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f79  00000000  00000000  00047551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb9d9  00000000  00000000  0005e4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129ea3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ac4  00000000  00000000  00129ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0012e9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ba0 	.word	0x08008ba0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008ba0 	.word	0x08008ba0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fc30 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f848 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f944 	bl	800078c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f8ae 	bl	8000664 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8da 	bl	80006c0 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f908 	bl	8000720 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f007 fef0 	bl	80082f4 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000514:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000518:	481c      	ldr	r0, [pc, #112]	@ (800058c <main+0x98>)
 800051a:	f000 ff7c 	bl	8001416 <HAL_GPIO_TogglePin>
	  HAL_Delay(75);
 800051e:	204b      	movs	r0, #75	@ 0x4b
 8000520:	f000 fc8e 	bl	8000e40 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000524:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000528:	4818      	ldr	r0, [pc, #96]	@ (800058c <main+0x98>)
 800052a:	f000 ff74 	bl	8001416 <HAL_GPIO_TogglePin>

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800052e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000532:	4816      	ldr	r0, [pc, #88]	@ (800058c <main+0x98>)
 8000534:	f000 ff6f 	bl	8001416 <HAL_GPIO_TogglePin>
	  HAL_Delay(75);
 8000538:	204b      	movs	r0, #75	@ 0x4b
 800053a:	f000 fc81 	bl	8000e40 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800053e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000542:	4812      	ldr	r0, [pc, #72]	@ (800058c <main+0x98>)
 8000544:	f000 ff67 	bl	8001416 <HAL_GPIO_TogglePin>

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000548:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800054c:	480f      	ldr	r0, [pc, #60]	@ (800058c <main+0x98>)
 800054e:	f000 ff62 	bl	8001416 <HAL_GPIO_TogglePin>
	  HAL_Delay(75);
 8000552:	204b      	movs	r0, #75	@ 0x4b
 8000554:	f000 fc74 	bl	8000e40 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000558:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800055c:	480b      	ldr	r0, [pc, #44]	@ (800058c <main+0x98>)
 800055e:	f000 ff5a 	bl	8001416 <HAL_GPIO_TogglePin>

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000562:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000566:	4809      	ldr	r0, [pc, #36]	@ (800058c <main+0x98>)
 8000568:	f000 ff55 	bl	8001416 <HAL_GPIO_TogglePin>
	  HAL_Delay(75);
 800056c:	204b      	movs	r0, #75	@ 0x4b
 800056e:	f000 fc67 	bl	8000e40 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000572:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000576:	4805      	ldr	r0, [pc, #20]	@ (800058c <main+0x98>)
 8000578:	f000 ff4d 	bl	8001416 <HAL_GPIO_TogglePin>

	  HAL_Delay(1700);
 800057c:	f240 60a4 	movw	r0, #1700	@ 0x6a4
 8000580:	f000 fc5e 	bl	8000e40 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000584:	f007 fedc 	bl	8008340 <MX_USB_HOST_Process>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000588:	bf00      	nop
 800058a:	e7c3      	b.n	8000514 <main+0x20>
 800058c:	40020c00 	.word	0x40020c00

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	@ 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f008 fa70 	bl	8008a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b28      	ldr	r3, [pc, #160]	@ (800065c <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a27      	ldr	r2, [pc, #156]	@ (800065c <SystemClock_Config+0xcc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b25      	ldr	r3, [pc, #148]	@ (800065c <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a21      	ldr	r2, [pc, #132]	@ (8000660 <SystemClock_Config+0xd0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000604:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000608:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060e:	2307      	movs	r3, #7
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fe30 	bl	800427c <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000622:	f000 f9b1 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000632:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2105      	movs	r1, #5
 8000644:	4618      	mov	r0, r3
 8000646:	f004 f891 	bl	800476c <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000650:	f000 f99a 	bl	8000988 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	@ 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <MX_I2C1_Init+0x50>)
 800066a:	4a13      	ldr	r2, [pc, #76]	@ (80006b8 <MX_I2C1_Init+0x54>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_I2C1_Init+0x50>)
 8000670:	4a12      	ldr	r2, [pc, #72]	@ (80006bc <MX_I2C1_Init+0x58>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <MX_I2C1_Init+0x50>)
 8000682:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000686:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <MX_I2C1_Init+0x50>)
 80006a2:	f003 f807 	bl	80036b4 <HAL_I2C_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 f96c 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000098 	.word	0x20000098
 80006b8:	40005400 	.word	0x40005400
 80006bc:	000186a0 	.word	0x000186a0

080006c0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006c4:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <MX_I2S3_Init+0x54>)
 80006c6:	4a14      	ldr	r2, [pc, #80]	@ (8000718 <MX_I2S3_Init+0x58>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ca:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_I2S3_Init+0x54>)
 80006cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_I2S3_Init+0x54>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_I2S3_Init+0x54>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006de:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <MX_I2S3_Init+0x54>)
 80006e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_I2S3_Init+0x54>)
 80006e8:	4a0c      	ldr	r2, [pc, #48]	@ (800071c <MX_I2S3_Init+0x5c>)
 80006ea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_I2S3_Init+0x54>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_I2S3_Init+0x54>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_I2S3_Init+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_I2S3_Init+0x54>)
 8000700:	f003 f91c 	bl	800393c <HAL_I2S_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800070a:	f000 f93d 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000ec 	.word	0x200000ec
 8000718:	40003c00 	.word	0x40003c00
 800071c:	00017700 	.word	0x00017700

08000720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000724:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_SPI1_Init+0x64>)
 8000726:	4a18      	ldr	r2, [pc, #96]	@ (8000788 <MX_SPI1_Init+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800072a:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <MX_SPI1_Init+0x64>)
 800072c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_SPI1_Init+0x64>)
 800074c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000750:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_SPI1_Init+0x64>)
 800076c:	220a      	movs	r2, #10
 800076e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_SPI1_Init+0x64>)
 8000772:	f004 fb49 	bl	8004e08 <HAL_SPI_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800077c:	f000 f904 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000134 	.word	0x20000134
 8000788:	40013000 	.word	0x40013000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	@ 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4b72      	ldr	r3, [pc, #456]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a71      	ldr	r2, [pc, #452]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b6f      	ldr	r3, [pc, #444]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b6b      	ldr	r3, [pc, #428]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a6a      	ldr	r2, [pc, #424]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b68      	ldr	r3, [pc, #416]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b64      	ldr	r3, [pc, #400]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a63      	ldr	r2, [pc, #396]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b61      	ldr	r3, [pc, #388]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b5d      	ldr	r3, [pc, #372]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a5c      	ldr	r2, [pc, #368]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b5a      	ldr	r3, [pc, #360]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b56      	ldr	r3, [pc, #344]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a55      	ldr	r2, [pc, #340]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b53      	ldr	r3, [pc, #332]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b4f      	ldr	r3, [pc, #316]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a4e      	ldr	r2, [pc, #312]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b4c      	ldr	r3, [pc, #304]	@ (8000970 <MX_GPIO_Init+0x1e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	4849      	ldr	r0, [pc, #292]	@ (8000974 <MX_GPIO_Init+0x1e8>)
 8000850:	f000 fdc8 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	4847      	ldr	r0, [pc, #284]	@ (8000978 <MX_GPIO_Init+0x1ec>)
 800085a:	f000 fdc3 	bl	80013e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085e:	2200      	movs	r2, #0
 8000860:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000864:	4845      	ldr	r0, [pc, #276]	@ (800097c <MX_GPIO_Init+0x1f0>)
 8000866:	f000 fdbd 	bl	80013e4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	483c      	ldr	r0, [pc, #240]	@ (8000974 <MX_GPIO_Init+0x1e8>)
 8000882:	f000 fc13 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4836      	ldr	r0, [pc, #216]	@ (8000978 <MX_GPIO_Init+0x1ec>)
 800089e:	f000 fc05 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b2:	2305      	movs	r3, #5
 80008b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	482e      	ldr	r0, [pc, #184]	@ (8000978 <MX_GPIO_Init+0x1ec>)
 80008be:	f000 fbf5 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	482a      	ldr	r0, [pc, #168]	@ (8000980 <MX_GPIO_Init+0x1f4>)
 80008d8:	f000 fbe8 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008dc:	2304      	movs	r3, #4
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4825      	ldr	r0, [pc, #148]	@ (8000984 <MX_GPIO_Init+0x1f8>)
 80008f0:	f000 fbdc 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000906:	2305      	movs	r3, #5
 8000908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	481c      	ldr	r0, [pc, #112]	@ (8000984 <MX_GPIO_Init+0x1f8>)
 8000912:	f000 fbcb 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000916:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800091a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4813      	ldr	r0, [pc, #76]	@ (800097c <MX_GPIO_Init+0x1f0>)
 8000930:	f000 fbbc 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000934:	2320      	movs	r3, #32
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480d      	ldr	r0, [pc, #52]	@ (800097c <MX_GPIO_Init+0x1f0>)
 8000948:	f000 fbb0 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800094c:	2302      	movs	r3, #2
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000950:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_GPIO_Init+0x1e8>)
 8000962:	f000 fba3 	bl	80010ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000966:	bf00      	nop
 8000968:	3730      	adds	r7, #48	@ 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40021000 	.word	0x40021000
 8000978:	40020800 	.word	0x40020800
 800097c:	40020c00 	.word	0x40020c00
 8000980:	40020000 	.word	0x40020000
 8000984:	40020400 	.word	0x40020400

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <Error_Handler+0x8>

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f000 fb28 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	@ (8000a68 <HAL_I2C_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a17      	ldr	r2, [pc, #92]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a22:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a28:	2312      	movs	r3, #18
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a34:	2304      	movs	r3, #4
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <HAL_I2C_MspInit+0x8c>)
 8000a40:	f000 fb34 	bl	80010ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4c:	4a07      	ldr	r2, [pc, #28]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_I2C_MspInit+0x88>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400

08000a74 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	@ 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a31      	ldr	r2, [pc, #196]	@ (8000b64 <HAL_I2S_MspInit+0xf0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d15a      	bne.n	8000b5a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000aa8:	23c0      	movs	r3, #192	@ 0xc0
 8000aaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f004 f865 	bl	8004b84 <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ac0:	f7ff ff62 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	4b27      	ldr	r3, [pc, #156]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000acc:	4a26      	ldr	r2, [pc, #152]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad4:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b20      	ldr	r3, [pc, #128]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b04:	4a18      	ldr	r2, [pc, #96]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0c:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <HAL_I2S_MspInit+0xf4>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b28:	2306      	movs	r3, #6
 8000b2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	480e      	ldr	r0, [pc, #56]	@ (8000b6c <HAL_I2S_MspInit+0xf8>)
 8000b34:	f000 faba 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b38:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <HAL_I2S_MspInit+0xfc>)
 8000b56:	f000 faa9 	bl	80010ac <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3738      	adds	r7, #56	@ 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40003c00 	.word	0x40003c00
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020800 	.word	0x40020800

08000b74 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	@ 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	@ (8000bf8 <HAL_SPI_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12b      	bne.n	8000bee <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <HAL_SPI_MspInit+0x88>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	@ (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bce:	23e0      	movs	r3, #224	@ 0xe0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bde:	2305      	movs	r3, #5
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <HAL_SPI_MspInit+0x8c>)
 8000bea:	f000 fa5f 	bl	80010ac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	@ 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40013000 	.word	0x40013000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <NMI_Handler+0x4>

08000c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5a:	f000 f8d1 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <OTG_FS_IRQHandler+0x10>)
 8000c6a:	f000 fecf 	bl	8001a0c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000570 	.word	0x20000570

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f007 ff04 	bl	8008ab4 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20020000 	.word	0x20020000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	2000018c 	.word	0x2000018c
 8000ce0:	20000a98 	.word	0x20000a98

08000ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d0c:	f7ff ffea 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f007 fec3 	bl	8008ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fbdb 	bl	80004f4 <main>
  bx  lr    
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d4c:	08008be4 	.word	0x08008be4
  ldr r2, =_sbss
 8000d50:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d54:	20000a98 	.word	0x20000a98

08000d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <HAL_Init+0x40>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <HAL_Init+0x40>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	@ (8000d9c <HAL_Init+0x40>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f94f 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fe00 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f967 	bl	8001092 <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ddc:	f000 f92f 	bl	800103e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	@ (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000190 	.word	0x20000190

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000190 	.word	0x20000190

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff ffee 	bl	8000e28 <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e66:	bf00      	nop
 8000e68:	f7ff ffde 	bl	8000e28 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4907      	ldr	r1, [pc, #28]	@ (8000f24 <__NVIC_EnableIRQ+0x38>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	@ (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	@ (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	@ 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	@ 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001008:	f7ff ff8e 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff29 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff3e 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff8e 	bl	8000f7c <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff31 	bl	8000eec <__NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffa2 	bl	8000fe4 <SysTick_Config>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e16b      	b.n	80013a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	f040 815a 	bne.w	800139a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d005      	beq.n	80010fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d130      	bne.n	8001160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 0201 	and.w	r2, r3, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b03      	cmp	r3, #3
 800116a:	d017      	beq.n	800119c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d123      	bne.n	80011f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	69b9      	ldr	r1, [r7, #24]
 80011ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0203 	and.w	r2, r3, #3
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80b4 	beq.w	800139a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b60      	ldr	r3, [pc, #384]	@ (80013b8 <HAL_GPIO_Init+0x30c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	4a5f      	ldr	r2, [pc, #380]	@ (80013b8 <HAL_GPIO_Init+0x30c>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001240:	6453      	str	r3, [r2, #68]	@ 0x44
 8001242:	4b5d      	ldr	r3, [pc, #372]	@ (80013b8 <HAL_GPIO_Init+0x30c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124e:	4a5b      	ldr	r2, [pc, #364]	@ (80013bc <HAL_GPIO_Init+0x310>)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a52      	ldr	r2, [pc, #328]	@ (80013c0 <HAL_GPIO_Init+0x314>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d02b      	beq.n	80012d2 <HAL_GPIO_Init+0x226>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a51      	ldr	r2, [pc, #324]	@ (80013c4 <HAL_GPIO_Init+0x318>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d025      	beq.n	80012ce <HAL_GPIO_Init+0x222>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a50      	ldr	r2, [pc, #320]	@ (80013c8 <HAL_GPIO_Init+0x31c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d01f      	beq.n	80012ca <HAL_GPIO_Init+0x21e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4f      	ldr	r2, [pc, #316]	@ (80013cc <HAL_GPIO_Init+0x320>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0x21a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4e      	ldr	r2, [pc, #312]	@ (80013d0 <HAL_GPIO_Init+0x324>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x216>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4d      	ldr	r2, [pc, #308]	@ (80013d4 <HAL_GPIO_Init+0x328>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x212>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4c      	ldr	r2, [pc, #304]	@ (80013d8 <HAL_GPIO_Init+0x32c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x20e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4b      	ldr	r2, [pc, #300]	@ (80013dc <HAL_GPIO_Init+0x330>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x20a>
 80012b2:	2307      	movs	r3, #7
 80012b4:	e00e      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012b6:	2308      	movs	r3, #8
 80012b8:	e00c      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012ba:	2306      	movs	r3, #6
 80012bc:	e00a      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012be:	2305      	movs	r3, #5
 80012c0:	e008      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012c2:	2304      	movs	r3, #4
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012c6:	2303      	movs	r3, #3
 80012c8:	e004      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_GPIO_Init+0x228>
 80012d2:	2300      	movs	r3, #0
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	f002 0203 	and.w	r2, r2, #3
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	4093      	lsls	r3, r2
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e4:	4935      	ldr	r1, [pc, #212]	@ (80013bc <HAL_GPIO_Init+0x310>)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b3b      	ldr	r3, [pc, #236]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001316:	4a32      	ldr	r2, [pc, #200]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131c:	4b30      	ldr	r3, [pc, #192]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001340:	4a27      	ldr	r2, [pc, #156]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001346:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800136a:	4a1d      	ldr	r2, [pc, #116]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001370:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001394:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <HAL_GPIO_Init+0x334>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3301      	adds	r3, #1
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	f67f ae90 	bls.w	80010c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3724      	adds	r7, #36	@ 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40013800 	.word	0x40013800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020800 	.word	0x40020800
 80013cc:	40020c00 	.word	0x40020c00
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40021400 	.word	0x40021400
 80013d8:	40021800 	.word	0x40021800
 80013dc:	40021c00 	.word	0x40021c00
 80013e0:	40013c00 	.word	0x40013c00

080013e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
 80013f0:	4613      	mov	r3, r2
 80013f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f4:	787b      	ldrb	r3, [r7, #1]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001400:	e003      	b.n	800140a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001402:	887b      	ldrh	r3, [r7, #2]
 8001404:	041a      	lsls	r2, r3, #16
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	619a      	str	r2, [r3, #24]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001416:	b480      	push	{r7}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	460b      	mov	r3, r1
 8001420:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001428:	887a      	ldrh	r2, [r7, #2]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4013      	ands	r3, r2
 800142e:	041a      	lsls	r2, r3, #16
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43d9      	mvns	r1, r3
 8001434:	887b      	ldrh	r3, [r7, #2]
 8001436:	400b      	ands	r3, r1
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af02      	add	r7, sp, #8
 8001450:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e059      	b.n	8001510 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f006 ff9a 	bl	80083b0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800148a:	d102      	bne.n	8001492 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f003 fdb4 	bl	8005004 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7c1a      	ldrb	r2, [r3, #16]
 80014a4:	f88d 2000 	strb.w	r2, [sp]
 80014a8:	3304      	adds	r3, #4
 80014aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ac:	f003 fd35 	bl	8004f1a <USB_CoreInit>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2202      	movs	r2, #2
 80014ba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e026      	b.n	8001510 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2101      	movs	r1, #1
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fdac 	bl	8005026 <USB_SetCurrentMode>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e017      	b.n	8001510 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7c1a      	ldrb	r2, [r3, #16]
 80014e8:	f88d 2000 	strb.w	r2, [sp]
 80014ec:	3304      	adds	r3, #4
 80014ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f0:	f003 ff4e 	bl	8005390 <USB_HostInit>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2202      	movs	r2, #2
 80014fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e004      	b.n	8001510 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b08b      	sub	sp, #44	@ 0x2c
 800151c:	af04      	add	r7, sp, #16
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	4608      	mov	r0, r1
 8001522:	4611      	mov	r1, r2
 8001524:	461a      	mov	r2, r3
 8001526:	4603      	mov	r3, r0
 8001528:	70fb      	strb	r3, [r7, #3]
 800152a:	460b      	mov	r3, r1
 800152c:	70bb      	strb	r3, [r7, #2]
 800152e:	4613      	mov	r3, r2
 8001530:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001532:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001534:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_HCD_HC_Init+0x2c>
 8001540:	2302      	movs	r3, #2
 8001542:	e09d      	b.n	8001680 <HAL_HCD_HC_Init+0x168>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800154c:	78fa      	ldrb	r2, [r7, #3]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	3319      	adds	r3, #25
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001560:	78fa      	ldrb	r2, [r7, #3]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	3314      	adds	r3, #20
 8001570:	787a      	ldrb	r2, [r7, #1]
 8001572:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001574:	78fa      	ldrb	r2, [r7, #3]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	3315      	adds	r3, #21
 8001584:	78fa      	ldrb	r2, [r7, #3]
 8001586:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001588:	78fa      	ldrb	r2, [r7, #3]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	3326      	adds	r3, #38	@ 0x26
 8001598:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800159c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	78bb      	ldrb	r3, [r7, #2]
 80015a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015a6:	b2d8      	uxtb	r0, r3
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	1a9b      	subs	r3, r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	3316      	adds	r3, #22
 80015b6:	4602      	mov	r2, r0
 80015b8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80015ba:	78fb      	ldrb	r3, [r7, #3]
 80015bc:	4619      	mov	r1, r3
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fbc8 	bl	8001d54 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80015c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da0a      	bge.n	80015e2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015cc:	78fa      	ldrb	r2, [r7, #3]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3317      	adds	r3, #23
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	e009      	b.n	80015f6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	1a9b      	subs	r3, r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	3317      	adds	r3, #23
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 f82c 	bl	8005658 <USB_GetHostSpeed>
 8001600:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001602:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001606:	2b01      	cmp	r3, #1
 8001608:	d10b      	bne.n	8001622 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800160a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_HCD_HC_Init+0x10a>
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d104      	bne.n	8001622 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2bbc      	cmp	r3, #188	@ 0xbc
 800161c:	d901      	bls.n	8001622 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800161e:	23bc      	movs	r3, #188	@ 0xbc
 8001620:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001622:	78fa      	ldrb	r2, [r7, #3]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3318      	adds	r3, #24
 8001632:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001636:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	b298      	uxth	r0, r3
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	1a9b      	subs	r3, r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	3328      	adds	r3, #40	@ 0x28
 800164c:	4602      	mov	r2, r0
 800164e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	b29b      	uxth	r3, r3
 8001658:	787c      	ldrb	r4, [r7, #1]
 800165a:	78ba      	ldrb	r2, [r7, #2]
 800165c:	78f9      	ldrb	r1, [r7, #3]
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	4623      	mov	r3, r4
 800166e:	f004 f81b 	bl	80056a8 <USB_HC_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	371c      	adds	r7, #28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}

08001688 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_HCD_HC_Halt+0x1e>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e00f      	b.n	80016c6 <HAL_HCD_HC_Halt+0x3e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 fbad 	bl	8005e16 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	4608      	mov	r0, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	4603      	mov	r3, r0
 80016e0:	70fb      	strb	r3, [r7, #3]
 80016e2:	460b      	mov	r3, r1
 80016e4:	70bb      	strb	r3, [r7, #2]
 80016e6:	4613      	mov	r3, r2
 80016e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	1a9b      	subs	r3, r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	3317      	adds	r3, #23
 80016fa:	78ba      	ldrb	r2, [r7, #2]
 80016fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	3326      	adds	r3, #38	@ 0x26
 800170e:	787a      	ldrb	r2, [r7, #1]
 8001710:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001712:	7c3b      	ldrb	r3, [r7, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d114      	bne.n	8001742 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	1a9b      	subs	r3, r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	332a      	adds	r3, #42	@ 0x2a
 8001728:	2203      	movs	r2, #3
 800172a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	3319      	adds	r3, #25
 800173c:	7f3a      	ldrb	r2, [r7, #28]
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	e009      	b.n	8001756 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	332a      	adds	r3, #42	@ 0x2a
 8001752:	2202      	movs	r2, #2
 8001754:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001756:	787b      	ldrb	r3, [r7, #1]
 8001758:	2b03      	cmp	r3, #3
 800175a:	f200 8102 	bhi.w	8001962 <HAL_HCD_HC_SubmitRequest+0x292>
 800175e:	a201      	add	r2, pc, #4	@ (adr r2, 8001764 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001764:	08001775 	.word	0x08001775
 8001768:	0800194d 	.word	0x0800194d
 800176c:	08001839 	.word	0x08001839
 8001770:	080018c3 	.word	0x080018c3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001774:	7c3b      	ldrb	r3, [r7, #16]
 8001776:	2b01      	cmp	r3, #1
 8001778:	f040 80f5 	bne.w	8001966 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800177c:	78bb      	ldrb	r3, [r7, #2]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d12d      	bne.n	80017de <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001782:	8b3b      	ldrh	r3, [r7, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d109      	bne.n	800179c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	333d      	adds	r3, #61	@ 0x3d
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	333d      	adds	r3, #61	@ 0x3d
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10a      	bne.n	80017c8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b2:	78fa      	ldrb	r2, [r7, #3]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	1a9b      	subs	r3, r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	332a      	adds	r3, #42	@ 0x2a
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80017c6:	e0ce      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	332a      	adds	r3, #42	@ 0x2a
 80017d8:	2202      	movs	r2, #2
 80017da:	701a      	strb	r2, [r3, #0]
      break;
 80017dc:	e0c3      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	1a9b      	subs	r3, r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	331a      	adds	r3, #26
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	f040 80b8 	bne.w	8001966 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	333c      	adds	r3, #60	@ 0x3c
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10a      	bne.n	8001822 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	332a      	adds	r3, #42	@ 0x2a
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
      break;
 8001820:	e0a1      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	332a      	adds	r3, #42	@ 0x2a
 8001832:	2202      	movs	r2, #2
 8001834:	701a      	strb	r2, [r3, #0]
      break;
 8001836:	e096      	b.n	8001966 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001838:	78bb      	ldrb	r3, [r7, #2]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d120      	bne.n	8001880 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	333d      	adds	r3, #61	@ 0x3d
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10a      	bne.n	800186a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	332a      	adds	r3, #42	@ 0x2a
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001868:	e07e      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	332a      	adds	r3, #42	@ 0x2a
 800187a:	2202      	movs	r2, #2
 800187c:	701a      	strb	r2, [r3, #0]
      break;
 800187e:	e073      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	333c      	adds	r3, #60	@ 0x3c
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10a      	bne.n	80018ac <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	332a      	adds	r3, #42	@ 0x2a
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
      break;
 80018aa:	e05d      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	332a      	adds	r3, #42	@ 0x2a
 80018bc:	2202      	movs	r2, #2
 80018be:	701a      	strb	r2, [r3, #0]
      break;
 80018c0:	e052      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018c2:	78bb      	ldrb	r3, [r7, #2]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d120      	bne.n	800190a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	333d      	adds	r3, #61	@ 0x3d
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10a      	bne.n	80018f4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	332a      	adds	r3, #42	@ 0x2a
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018f2:	e039      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	332a      	adds	r3, #42	@ 0x2a
 8001904:	2202      	movs	r2, #2
 8001906:	701a      	strb	r2, [r3, #0]
      break;
 8001908:	e02e      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	333c      	adds	r3, #60	@ 0x3c
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10a      	bne.n	8001936 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	332a      	adds	r3, #42	@ 0x2a
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
      break;
 8001934:	e018      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	332a      	adds	r3, #42	@ 0x2a
 8001946:	2202      	movs	r2, #2
 8001948:	701a      	strb	r2, [r3, #0]
      break;
 800194a:	e00d      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	332a      	adds	r3, #42	@ 0x2a
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
      break;
 8001960:	e002      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001962:	bf00      	nop
 8001964:	e000      	b.n	8001968 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001966:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	332c      	adds	r3, #44	@ 0x2c
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	8b39      	ldrh	r1, [r7, #24]
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	1a9b      	subs	r3, r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4403      	add	r3, r0
 800198c:	3334      	adds	r3, #52	@ 0x34
 800198e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	334c      	adds	r3, #76	@ 0x4c
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	3338      	adds	r3, #56	@ 0x38
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	3315      	adds	r3, #21
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	334d      	adds	r3, #77	@ 0x4d
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	4613      	mov	r3, r2
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	3310      	adds	r3, #16
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	1d19      	adds	r1, r3, #4
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	799b      	ldrb	r3, [r3, #6]
 80019fa:	461a      	mov	r2, r3
 80019fc:	f003 ff80 	bl	8005900 <USB_HC_StartXfer>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop

08001a0c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 fc75 	bl	8005312 <USB_GetMode>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	f040 80fb 	bne.w	8001c26 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 fc38 	bl	80052aa <USB_ReadInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80f1 	beq.w	8001c24 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 fc2f 	bl	80052aa <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a56:	d104      	bne.n	8001a62 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 fc1f 	bl	80052aa <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a76:	d104      	bne.n	8001a82 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fc0f 	bl	80052aa <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001a96:	d104      	bne.n	8001aa2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fbff 	bl	80052aa <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d103      	bne.n	8001abe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2202      	movs	r2, #2
 8001abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 fbf1 	bl	80052aa <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ad2:	d120      	bne.n	8001b16 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001adc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d113      	bne.n	8001b16 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001aee:	2110      	movs	r1, #16
 8001af0:	6938      	ldr	r0, [r7, #16]
 8001af2:	f003 fae4 	bl	80050be <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001af6:	6938      	ldr	r0, [r7, #16]
 8001af8:	f003 fb13 	bl	8005122 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7a5b      	ldrb	r3, [r3, #9]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d105      	bne.n	8001b10 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 fd04 	bl	8005518 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f006 fccb 	bl	80084ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fbc5 	bl	80052aa <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b2a:	d102      	bne.n	8001b32 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f001 fd4d 	bl	80035cc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fbb7 	bl	80052aa <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d106      	bne.n	8001b54 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f006 fc94 	bl	8008474 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2208      	movs	r2, #8
 8001b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fba6 	bl	80052aa <USB_ReadInterrupts>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b68:	d139      	bne.n	8001bde <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 f940 	bl	8005df4 <USB_HC_ReadInterrupt>
 8001b74:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e025      	b.n	8001bc8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d018      	beq.n	8001bc2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f905 	bl	8001dbe <HCD_HC_IN_IRQHandler>
 8001bb4:	e005      	b.n	8001bc2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 ff67 	bl	8002a90 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	795b      	ldrb	r3, [r3, #5]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d3d3      	bcc.n	8001b7c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fb61 	bl	80052aa <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d101      	bne.n	8001bf6 <HAL_HCD_IRQHandler+0x1ea>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_HCD_IRQHandler+0x1ec>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d014      	beq.n	8001c26 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0210 	bic.w	r2, r2, #16
 8001c0a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f001 fbfe 	bl	800340e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699a      	ldr	r2, [r3, #24]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0210 	orr.w	r2, r2, #16
 8001c20:	619a      	str	r2, [r3, #24]
 8001c22:	e000      	b.n	8001c26 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c24:	bf00      	nop
    }
  }
}
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_HCD_Start+0x16>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e013      	b.n	8001c6a <HAL_HCD_Start+0x3e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 fcc8 	bl	80055e6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 f9c1 	bl	8004fe2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_HCD_Stop+0x16>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e00d      	b.n	8001ca4 <HAL_HCD_Stop+0x32>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f004 fa1b 	bl	80060d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f003 fc6a 	bl	8005592 <USB_ResetPort>
 8001cbe:	4603      	mov	r3, r0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	334c      	adds	r3, #76	@ 0x4c
 8001ce4:	781b      	ldrb	r3, [r3, #0]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3338      	adds	r3, #56	@ 0x38
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f003 fcac 	bl	8005686 <USB_GetCurrentFrame>
 8001d2e:	4603      	mov	r3, r0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 fc87 	bl	8005658 <USB_GetHostSpeed>
 8001d4a:	4603      	mov	r3, r0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	331a      	adds	r3, #26
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	331b      	adds	r3, #27
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	3325      	adds	r3, #37	@ 0x25
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3324      	adds	r3, #36	@ 0x24
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 fa77 	bl	80052d0 <USB_ReadChInterrupts>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d11a      	bne.n	8001e22 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001dfe:	78fa      	ldrb	r2, [r7, #3]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	1a9b      	subs	r3, r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	334d      	adds	r3, #77	@ 0x4d
 8001e0e:	2207      	movs	r2, #7
 8001e10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	78fa      	ldrb	r2, [r7, #3]
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 fffb 	bl	8005e16 <USB_HC_Halt>
 8001e20:	e09e      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	78fa      	ldrb	r2, [r7, #3]
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fa50 	bl	80052d0 <USB_ReadChInterrupts>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e3a:	d11b      	bne.n	8001e74 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	334d      	adds	r3, #77	@ 0x4d
 8001e60:	2208      	movs	r2, #8
 8001e62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 ffd2 	bl	8005e16 <USB_HC_Halt>
 8001e72:	e075      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 fa27 	bl	80052d0 <USB_ReadChInterrupts>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d11a      	bne.n	8001ec2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	334d      	adds	r3, #77	@ 0x4d
 8001eae:	2206      	movs	r2, #6
 8001eb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 ffab 	bl	8005e16 <USB_HC_Halt>
 8001ec0:	e04e      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	78fa      	ldrb	r2, [r7, #3]
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 fa00 	bl	80052d0 <USB_ReadChInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eda:	d11b      	bne.n	8001f14 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	334d      	adds	r3, #77	@ 0x4d
 8001f00:	2209      	movs	r2, #9
 8001f02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 ff82 	bl	8005e16 <USB_HC_Halt>
 8001f12:	e025      	b.n	8001f60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	78fa      	ldrb	r2, [r7, #3]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 f9d7 	bl	80052d0 <USB_ReadChInterrupts>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f28:	2b80      	cmp	r3, #128	@ 0x80
 8001f2a:	d119      	bne.n	8001f60 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2380      	movs	r3, #128	@ 0x80
 8001f3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	334d      	adds	r3, #77	@ 0x4d
 8001f4e:	2207      	movs	r2, #7
 8001f50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 ff5b 	bl	8005e16 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 f9b1 	bl	80052d0 <USB_ReadChInterrupts>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f78:	d112      	bne.n	8001fa0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 ff47 	bl	8005e16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f9a:	6093      	str	r3, [r2, #8]
 8001f9c:	f000 bd75 	b.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 f991 	bl	80052d0 <USB_ReadChInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	f040 8128 	bne.w	800220a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2320      	movs	r3, #32
 8001fca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	331b      	adds	r3, #27
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d119      	bne.n	8002016 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	331b      	adds	r3, #27
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	0151      	lsls	r1, r2, #5
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	440a      	add	r2, r1
 800200c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002014:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	799b      	ldrb	r3, [r3, #6]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01b      	beq.n	8002056 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	3330      	adds	r3, #48	@ 0x30
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	015a      	lsls	r2, r3, #5
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4413      	add	r3, r2
 8002038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	1ac9      	subs	r1, r1, r3
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4403      	add	r3, r0
 8002052:	3338      	adds	r3, #56	@ 0x38
 8002054:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	334d      	adds	r3, #77	@ 0x4d
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	3344      	adds	r3, #68	@ 0x44
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800208a:	461a      	mov	r2, r3
 800208c:	2301      	movs	r3, #1
 800208e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	3326      	adds	r3, #38	@ 0x26
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	3326      	adds	r3, #38	@ 0x26
 80020b6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d110      	bne.n	80020de <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 fea6 	bl	8005e16 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d6:	461a      	mov	r2, r3
 80020d8:	2310      	movs	r3, #16
 80020da:	6093      	str	r3, [r2, #8]
 80020dc:	e03d      	b.n	800215a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	1a9b      	subs	r3, r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3326      	adds	r3, #38	@ 0x26
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d00a      	beq.n	800210a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3326      	adds	r3, #38	@ 0x26
 8002104:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002106:	2b01      	cmp	r3, #1
 8002108:	d127      	bne.n	800215a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4413      	add	r3, r2
 8002112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	0151      	lsls	r1, r2, #5
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	440a      	add	r2, r1
 8002120:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002124:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002128:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	334c      	adds	r3, #76	@ 0x4c
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	334c      	adds	r3, #76	@ 0x4c
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	4619      	mov	r1, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f006 f9b7 	bl	80084c8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	799b      	ldrb	r3, [r3, #6]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d13b      	bne.n	80021da <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	3338      	adds	r3, #56	@ 0x38
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4403      	add	r3, r0
 8002182:	3328      	adds	r3, #40	@ 0x28
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	440b      	add	r3, r1
 8002188:	1e59      	subs	r1, r3, #1
 800218a:	78fa      	ldrb	r2, [r7, #3]
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4403      	add	r3, r0
 8002198:	3328      	adds	r3, #40	@ 0x28
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8470 	beq.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	333c      	adds	r3, #60	@ 0x3c
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	f083 0301 	eor.w	r3, r3, #1
 80021c2:	b2d8      	uxtb	r0, r3
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	1a9b      	subs	r3, r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	333c      	adds	r3, #60	@ 0x3c
 80021d2:	4602      	mov	r2, r0
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	f000 bc58 	b.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	333c      	adds	r3, #60	@ 0x3c
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	f083 0301 	eor.w	r3, r3, #1
 80021f2:	b2d8      	uxtb	r0, r3
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	333c      	adds	r3, #60	@ 0x3c
 8002202:	4602      	mov	r2, r0
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	f000 bc40 	b.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f003 f85c 	bl	80052d0 <USB_ReadChInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b20      	cmp	r3, #32
 8002220:	d131      	bne.n	8002286 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800222e:	461a      	mov	r2, r3
 8002230:	2320      	movs	r3, #32
 8002232:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	331a      	adds	r3, #26
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	f040 841f 	bne.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	331b      	adds	r3, #27
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	1a9b      	subs	r3, r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	334d      	adds	r3, #77	@ 0x4d
 8002270:	2203      	movs	r2, #3
 8002272:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f003 fdca 	bl	8005e16 <USB_HC_Halt>
 8002282:	f000 bc02 	b.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f003 f81e 	bl	80052d0 <USB_ReadChInterrupts>
 8002294:	4603      	mov	r3, r0
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b02      	cmp	r3, #2
 800229c:	f040 8305 	bne.w	80028aa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022ac:	461a      	mov	r2, r3
 80022ae:	2302      	movs	r3, #2
 80022b0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	334d      	adds	r3, #77	@ 0x4d
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d114      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	334d      	adds	r3, #77	@ 0x4d
 80022d8:	2202      	movs	r2, #2
 80022da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	334c      	adds	r3, #76	@ 0x4c
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e2cc      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	334d      	adds	r3, #77	@ 0x4d
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b06      	cmp	r3, #6
 8002306:	d114      	bne.n	8002332 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	334d      	adds	r3, #77	@ 0x4d
 8002318:	2202      	movs	r2, #2
 800231a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	334c      	adds	r3, #76	@ 0x4c
 800232c:	2205      	movs	r2, #5
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	e2ac      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	334d      	adds	r3, #77	@ 0x4d
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b07      	cmp	r3, #7
 8002346:	d00b      	beq.n	8002360 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	334d      	adds	r3, #77	@ 0x4d
 8002358:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800235a:	2b09      	cmp	r3, #9
 800235c:	f040 80a6 	bne.w	80024ac <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	334d      	adds	r3, #77	@ 0x4d
 8002370:	2202      	movs	r2, #2
 8002372:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3344      	adds	r3, #68	@ 0x44
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	1c59      	adds	r1, r3, #1
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4403      	add	r3, r0
 8002394:	3344      	adds	r3, #68	@ 0x44
 8002396:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	3344      	adds	r3, #68	@ 0x44
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d943      	bls.n	8002436 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	3344      	adds	r3, #68	@ 0x44
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	331a      	adds	r3, #26
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d123      	bne.n	8002420 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	331b      	adds	r3, #27
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	331c      	adds	r3, #28
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	0151      	lsls	r1, r2, #5
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	440a      	add	r2, r1
 8002416:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800241a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800241e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	334c      	adds	r3, #76	@ 0x4c
 8002430:	2204      	movs	r2, #4
 8002432:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002434:	e229      	b.n	800288a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	334c      	adds	r3, #76	@ 0x4c
 8002446:	2202      	movs	r2, #2
 8002448:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800244a:	78fa      	ldrb	r2, [r7, #3]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3326      	adds	r3, #38	@ 0x26
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	3326      	adds	r3, #38	@ 0x26
 8002470:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002472:	2b02      	cmp	r3, #2
 8002474:	f040 8209 	bne.w	800288a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800248e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002496:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024a4:	461a      	mov	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024aa:	e1ee      	b.n	800288a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	334d      	adds	r3, #77	@ 0x4d
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b05      	cmp	r3, #5
 80024c0:	f040 80c8 	bne.w	8002654 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	334d      	adds	r3, #77	@ 0x4d
 80024d4:	2202      	movs	r2, #2
 80024d6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	331b      	adds	r3, #27
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	f040 81ce 	bne.w	800288c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	3326      	adds	r3, #38	@ 0x26
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b03      	cmp	r3, #3
 8002504:	d16b      	bne.n	80025de <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	3348      	adds	r3, #72	@ 0x48
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	1c59      	adds	r1, r3, #1
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4403      	add	r3, r0
 8002526:	3348      	adds	r3, #72	@ 0x48
 8002528:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	3348      	adds	r3, #72	@ 0x48
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d943      	bls.n	80025c8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	3348      	adds	r3, #72	@ 0x48
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	331b      	adds	r3, #27
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	3344      	adds	r3, #68	@ 0x44
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d809      	bhi.n	8002592 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	331c      	adds	r3, #28
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4413      	add	r3, r2
 800259a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	0151      	lsls	r1, r2, #5
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	440a      	add	r2, r1
 80025a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	334c      	adds	r3, #76	@ 0x4c
 80025c2:	2204      	movs	r2, #4
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	e014      	b.n	80025f2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	334c      	adds	r3, #76	@ 0x4c
 80025d8:	2202      	movs	r2, #2
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e009      	b.n	80025f2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	334c      	adds	r3, #76	@ 0x4c
 80025ee:	2202      	movs	r2, #2
 80025f0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	3326      	adds	r3, #38	@ 0x26
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	3326      	adds	r3, #38	@ 0x26
 8002618:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800261a:	2b02      	cmp	r3, #2
 800261c:	f040 8136 	bne.w	800288c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002636:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800263e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800264c:	461a      	mov	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e11b      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	334d      	adds	r3, #77	@ 0x4d
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b03      	cmp	r3, #3
 8002668:	f040 8081 	bne.w	800276e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	334d      	adds	r3, #77	@ 0x4d
 800267c:	2202      	movs	r2, #2
 800267e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	331b      	adds	r3, #27
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	f040 80fa 	bne.w	800288c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	334c      	adds	r3, #76	@ 0x4c
 80026a8:	2202      	movs	r2, #2
 80026aa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	0151      	lsls	r1, r2, #5
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	440a      	add	r2, r1
 80026c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ca:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	0151      	lsls	r1, r2, #5
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	440a      	add	r2, r1
 80026e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026ea:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	0151      	lsls	r1, r2, #5
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	440a      	add	r2, r1
 8002702:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002706:	f023 0320 	bic.w	r3, r3, #32
 800270a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	3326      	adds	r3, #38	@ 0x26
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3326      	adds	r3, #38	@ 0x26
 8002732:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002734:	2b02      	cmp	r3, #2
 8002736:	f040 80a9 	bne.w	800288c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002750:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002758:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e08e      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	334d      	adds	r3, #77	@ 0x4d
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d143      	bne.n	800280c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	334d      	adds	r3, #77	@ 0x4d
 8002794:	2202      	movs	r2, #2
 8002796:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	334c      	adds	r3, #76	@ 0x4c
 80027a8:	2202      	movs	r2, #2
 80027aa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	3326      	adds	r3, #38	@ 0x26
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	3326      	adds	r3, #38	@ 0x26
 80027d2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d159      	bne.n	800288c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002804:	461a      	mov	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e03f      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	334d      	adds	r3, #77	@ 0x4d
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b08      	cmp	r3, #8
 8002820:	d126      	bne.n	8002870 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	334d      	adds	r3, #77	@ 0x4d
 8002832:	2202      	movs	r2, #2
 8002834:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	3344      	adds	r3, #68	@ 0x44
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	1c59      	adds	r1, r3, #1
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4403      	add	r3, r0
 8002856:	3344      	adds	r3, #68	@ 0x44
 8002858:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	334c      	adds	r3, #76	@ 0x4c
 800286a:	2204      	movs	r2, #4
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e00d      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	334d      	adds	r3, #77	@ 0x4d
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b02      	cmp	r3, #2
 8002884:	f000 8100 	beq.w	8002a88 <HCD_HC_IN_IRQHandler+0xcca>
 8002888:	e000      	b.n	800288c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800288a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	334c      	adds	r3, #76	@ 0x4c
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f005 fe10 	bl	80084c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028a8:	e0ef      	b.n	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 fd0c 	bl	80052d0 <USB_ReadChInterrupts>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028be:	2b40      	cmp	r3, #64	@ 0x40
 80028c0:	d12f      	bne.n	8002922 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ce:	461a      	mov	r2, r3
 80028d0:	2340      	movs	r3, #64	@ 0x40
 80028d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	334d      	adds	r3, #77	@ 0x4d
 80028e4:	2205      	movs	r2, #5
 80028e6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	331a      	adds	r3, #26
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3344      	adds	r3, #68	@ 0x44
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f003 fa7b 	bl	8005e16 <USB_HC_Halt>
 8002920:	e0b3      	b.n	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f002 fcd0 	bl	80052d0 <USB_ReadChInterrupts>
 8002930:	4603      	mov	r3, r0
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b10      	cmp	r3, #16
 8002938:	f040 80a7 	bne.w	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3326      	adds	r3, #38	@ 0x26
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b03      	cmp	r3, #3
 8002950:	d11b      	bne.n	800298a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	3344      	adds	r3, #68	@ 0x44
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	334d      	adds	r3, #77	@ 0x4d
 8002976:	2204      	movs	r2, #4
 8002978:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fa47 	bl	8005e16 <USB_HC_Halt>
 8002988:	e03f      	b.n	8002a0a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	3326      	adds	r3, #38	@ 0x26
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3326      	adds	r3, #38	@ 0x26
 80029b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d129      	bne.n	8002a0a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	3344      	adds	r3, #68	@ 0x44
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	799b      	ldrb	r3, [r3, #6]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HCD_HC_IN_IRQHandler+0xc2a>
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	331b      	adds	r3, #27
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d110      	bne.n	8002a0a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	334d      	adds	r3, #77	@ 0x4d
 80029f8:	2204      	movs	r2, #4
 80029fa:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f003 fa06 	bl	8005e16 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	331b      	adds	r3, #27
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d129      	bne.n	8002a74 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	331b      	adds	r3, #27
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	0151      	lsls	r1, r2, #5
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	440a      	add	r2, r1
 8002a4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a52:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	0151      	lsls	r1, r2, #5
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	440a      	add	r2, r1
 8002a6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a6e:	f043 0320 	orr.w	r3, r3, #32
 8002a72:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a80:	461a      	mov	r2, r3
 8002a82:	2310      	movs	r3, #16
 8002a84:	6093      	str	r3, [r2, #8]
 8002a86:	e000      	b.n	8002a8a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002a88:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 fc0e 	bl	80052d0 <USB_ReadChInterrupts>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d11b      	bne.n	8002af6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aca:	461a      	mov	r2, r3
 8002acc:	2304      	movs	r3, #4
 8002ace:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	334d      	adds	r3, #77	@ 0x4d
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 f992 	bl	8005e16 <USB_HC_Halt>
 8002af2:	f000 bc89 	b.w	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f002 fbe6 	bl	80052d0 <USB_ReadChInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	f040 8082 	bne.w	8002c14 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2320      	movs	r3, #32
 8002b20:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	3319      	adds	r3, #25
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d124      	bne.n	8002b82 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3319      	adds	r3, #25
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	334c      	adds	r3, #76	@ 0x4c
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	334d      	adds	r3, #77	@ 0x4d
 8002b70:	2203      	movs	r2, #3
 8002b72:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f003 f94a 	bl	8005e16 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	331a      	adds	r3, #26
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	f040 8437 	bne.w	8003408 <HCD_HC_OUT_IRQHandler+0x978>
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	331b      	adds	r3, #27
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 842b 	bne.w	8003408 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3326      	adds	r3, #38	@ 0x26
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d009      	beq.n	8002bdc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	331b      	adds	r3, #27
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	334d      	adds	r3, #77	@ 0x4d
 8002bec:	2203      	movs	r2, #3
 8002bee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 f90c 	bl	8005e16 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3344      	adds	r3, #68	@ 0x44
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e3f9      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	78fa      	ldrb	r2, [r7, #3]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f002 fb57 	bl	80052d0 <USB_ReadChInterrupts>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c2c:	d111      	bne.n	8002c52 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c40:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 f8e3 	bl	8005e16 <USB_HC_Halt>
 8002c50:	e3da      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 fb38 	bl	80052d0 <USB_ReadChInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d168      	bne.n	8002d3c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3344      	adds	r3, #68	@ 0x44
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 fb22 	bl	80052d0 <USB_ReadChInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c92:	2b40      	cmp	r3, #64	@ 0x40
 8002c94:	d112      	bne.n	8002cbc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3319      	adds	r3, #25
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2340      	movs	r3, #64	@ 0x40
 8002cba:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	331b      	adds	r3, #27
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d019      	beq.n	8002d06 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	331b      	adds	r3, #27
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	0151      	lsls	r1, r2, #5
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	440a      	add	r2, r1
 8002cfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d04:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	2301      	movs	r3, #1
 8002d16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	334d      	adds	r3, #77	@ 0x4d
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 f86e 	bl	8005e16 <USB_HC_Halt>
 8002d3a:	e365      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 fac3 	bl	80052d0 <USB_ReadChInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d50:	2b40      	cmp	r3, #64	@ 0x40
 8002d52:	d139      	bne.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	334d      	adds	r3, #77	@ 0x4d
 8002d64:	2205      	movs	r2, #5
 8002d66:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	331a      	adds	r3, #26
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3319      	adds	r3, #25
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	3344      	adds	r3, #68	@ 0x44
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f003 f831 	bl	8005e16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2340      	movs	r3, #64	@ 0x40
 8002dc4:	6093      	str	r3, [r2, #8]
 8002dc6:	e31f      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f002 fa7d 	bl	80052d0 <USB_ReadChInterrupts>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d11a      	bne.n	8002e16 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dec:	461a      	mov	r2, r3
 8002dee:	2308      	movs	r3, #8
 8002df0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	334d      	adds	r3, #77	@ 0x4d
 8002e02:	2206      	movs	r2, #6
 8002e04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f003 f801 	bl	8005e16 <USB_HC_Halt>
 8002e14:	e2f8      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f002 fa56 	bl	80052d0 <USB_ReadChInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d144      	bne.n	8002eb8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3344      	adds	r3, #68	@ 0x44
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	334d      	adds	r3, #77	@ 0x4d
 8002e52:	2204      	movs	r2, #4
 8002e54:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	3319      	adds	r3, #25
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d114      	bne.n	8002e96 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	3318      	adds	r3, #24
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	3319      	adds	r3, #25
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 ffb9 	bl	8005e16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2310      	movs	r3, #16
 8002eb4:	6093      	str	r3, [r2, #8]
 8002eb6:	e2a7      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f002 fa05 	bl	80052d0 <USB_ReadChInterrupts>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ecc:	2b80      	cmp	r3, #128	@ 0x80
 8002ece:	f040 8083 	bne.w	8002fd8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	799b      	ldrb	r3, [r3, #6]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d111      	bne.n	8002efe <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	334d      	adds	r3, #77	@ 0x4d
 8002eea:	2207      	movs	r2, #7
 8002eec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 ff8d 	bl	8005e16 <USB_HC_Halt>
 8002efc:	e062      	b.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3344      	adds	r3, #68	@ 0x44
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	1c59      	adds	r1, r3, #1
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4403      	add	r3, r0
 8002f1e:	3344      	adds	r3, #68	@ 0x44
 8002f20:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	3344      	adds	r3, #68	@ 0x44
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d922      	bls.n	8002f7e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	3344      	adds	r3, #68	@ 0x44
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	334c      	adds	r3, #76	@ 0x4c
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	334c      	adds	r3, #76	@ 0x4c
 8002f70:	781a      	ldrb	r2, [r3, #0]
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	4619      	mov	r1, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f005 faa6 	bl	80084c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f7c:	e022      	b.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	334c      	adds	r3, #76	@ 0x4c
 8002f8e:	2202      	movs	r2, #2
 8002f90:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fa8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fb0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	6093      	str	r3, [r2, #8]
 8002fd6:	e217      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f002 f975 	bl	80052d0 <USB_ReadChInterrupts>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff0:	d11b      	bne.n	800302a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	334d      	adds	r3, #77	@ 0x4d
 8003002:	2209      	movs	r2, #9
 8003004:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f002 ff01 	bl	8005e16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003020:	461a      	mov	r2, r3
 8003022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003026:	6093      	str	r3, [r2, #8]
 8003028:	e1ee      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f002 f94c 	bl	80052d0 <USB_ReadChInterrupts>
 8003038:	4603      	mov	r3, r0
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	f040 81df 	bne.w	8003402 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003050:	461a      	mov	r2, r3
 8003052:	2302      	movs	r3, #2
 8003054:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	334d      	adds	r3, #77	@ 0x4d
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	f040 8093 	bne.w	8003194 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	334d      	adds	r3, #77	@ 0x4d
 800307e:	2202      	movs	r2, #2
 8003080:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	334c      	adds	r3, #76	@ 0x4c
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3326      	adds	r3, #38	@ 0x26
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d00b      	beq.n	80030c4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3326      	adds	r3, #38	@ 0x26
 80030bc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030be:	2b03      	cmp	r3, #3
 80030c0:	f040 8190 	bne.w	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	799b      	ldrb	r3, [r3, #6]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d115      	bne.n	80030f8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	333d      	adds	r3, #61	@ 0x3d
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	f083 0301 	eor.w	r3, r3, #1
 80030e4:	b2d8      	uxtb	r0, r3
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	333d      	adds	r3, #61	@ 0x3d
 80030f4:	4602      	mov	r2, r0
 80030f6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	799b      	ldrb	r3, [r3, #6]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 8171 	bne.w	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	3334      	adds	r3, #52	@ 0x34
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8165 	beq.w	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3334      	adds	r3, #52	@ 0x34
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4403      	add	r3, r0
 800313a:	3328      	adds	r3, #40	@ 0x28
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	440b      	add	r3, r1
 8003140:	1e59      	subs	r1, r3, #1
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4403      	add	r3, r0
 8003150:	3328      	adds	r3, #40	@ 0x28
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	fbb1 f3f3 	udiv	r3, r1, r3
 8003158:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 813f 	beq.w	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	333d      	adds	r3, #61	@ 0x3d
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	f083 0301 	eor.w	r3, r3, #1
 800317e:	b2d8      	uxtb	r0, r3
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	333d      	adds	r3, #61	@ 0x3d
 800318e:	4602      	mov	r2, r0
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e127      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	334d      	adds	r3, #77	@ 0x4d
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d120      	bne.n	80031ec <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	334d      	adds	r3, #77	@ 0x4d
 80031ba:	2202      	movs	r2, #2
 80031bc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	331b      	adds	r3, #27
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	f040 8107 	bne.w	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	334c      	adds	r3, #76	@ 0x4c
 80031e6:	2202      	movs	r2, #2
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e0fb      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	334d      	adds	r3, #77	@ 0x4d
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d13a      	bne.n	8003278 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334d      	adds	r3, #77	@ 0x4d
 8003212:	2202      	movs	r2, #2
 8003214:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334c      	adds	r3, #76	@ 0x4c
 8003226:	2202      	movs	r2, #2
 8003228:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	331b      	adds	r3, #27
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b01      	cmp	r3, #1
 800323e:	f040 80d1 	bne.w	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	331b      	adds	r3, #27
 8003252:	2200      	movs	r2, #0
 8003254:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	0151      	lsls	r1, r2, #5
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	440a      	add	r2, r1
 800326c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003274:	6053      	str	r3, [r2, #4]
 8003276:	e0b5      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	334d      	adds	r3, #77	@ 0x4d
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b05      	cmp	r3, #5
 800328c:	d114      	bne.n	80032b8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	334d      	adds	r3, #77	@ 0x4d
 800329e:	2202      	movs	r2, #2
 80032a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	334c      	adds	r3, #76	@ 0x4c
 80032b2:	2202      	movs	r2, #2
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e095      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	334d      	adds	r3, #77	@ 0x4d
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d114      	bne.n	80032f8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	334d      	adds	r3, #77	@ 0x4d
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	334c      	adds	r3, #76	@ 0x4c
 80032f2:	2205      	movs	r2, #5
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	e075      	b.n	80033e4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	334d      	adds	r3, #77	@ 0x4d
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b07      	cmp	r3, #7
 800330c:	d00a      	beq.n	8003324 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	334d      	adds	r3, #77	@ 0x4d
 800331e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003320:	2b09      	cmp	r3, #9
 8003322:	d170      	bne.n	8003406 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334d      	adds	r3, #77	@ 0x4d
 8003334:	2202      	movs	r2, #2
 8003336:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3344      	adds	r3, #68	@ 0x44
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	1c59      	adds	r1, r3, #1
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4403      	add	r3, r0
 8003358:	3344      	adds	r3, #68	@ 0x44
 800335a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3344      	adds	r3, #68	@ 0x44
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d914      	bls.n	800339c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3344      	adds	r3, #68	@ 0x44
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	334c      	adds	r3, #76	@ 0x4c
 8003396:	2204      	movs	r2, #4
 8003398:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800339a:	e022      	b.n	80033e2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	334c      	adds	r3, #76	@ 0x4c
 80033ac:	2202      	movs	r2, #2
 80033ae:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033c6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033ce:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033dc:	461a      	mov	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033e2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	334c      	adds	r3, #76	@ 0x4c
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f005 f864 	bl	80084c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003400:	e002      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003406:	bf00      	nop
  }
}
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b08a      	sub	sp, #40	@ 0x28
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	0c5b      	lsrs	r3, r3, #17
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003442:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d004      	beq.n	8003454 <HCD_RXQLVL_IRQHandler+0x46>
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b05      	cmp	r3, #5
 800344e:	f000 80b6 	beq.w	80035be <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003452:	e0b7      	b.n	80035c4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80b3 	beq.w	80035c2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	332c      	adds	r3, #44	@ 0x2c
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80a7 	beq.w	80035c2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3338      	adds	r3, #56	@ 0x38
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	18d1      	adds	r1, r2, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4403      	add	r3, r0
 8003498:	3334      	adds	r3, #52	@ 0x34
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4299      	cmp	r1, r3
 800349e:	f200 8083 	bhi.w	80035a8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	332c      	adds	r3, #44	@ 0x2c
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	b292      	uxth	r2, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	f001 fe9c 	bl	80051fa <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	332c      	adds	r3, #44	@ 0x2c
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	18d1      	adds	r1, r2, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4403      	add	r3, r0
 80034e6:	332c      	adds	r3, #44	@ 0x2c
 80034e8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	3338      	adds	r3, #56	@ 0x38
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	18d1      	adds	r1, r2, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4403      	add	r3, r0
 800350e:	3338      	adds	r3, #56	@ 0x38
 8003510:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	0cdb      	lsrs	r3, r3, #19
 8003522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003526:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	3328      	adds	r3, #40	@ 0x28
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4293      	cmp	r3, r2
 8003540:	d13f      	bne.n	80035c2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d03c      	beq.n	80035c2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800355e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003566:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003574:	461a      	mov	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	333c      	adds	r3, #60	@ 0x3c
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	f083 0301 	eor.w	r3, r3, #1
 8003590:	b2d8      	uxtb	r0, r3
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	333c      	adds	r3, #60	@ 0x3c
 80035a2:	4602      	mov	r2, r0
 80035a4:	701a      	strb	r2, [r3, #0]
      break;
 80035a6:	e00c      	b.n	80035c2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	334c      	adds	r3, #76	@ 0x4c
 80035b8:	2204      	movs	r2, #4
 80035ba:	701a      	strb	r2, [r3, #0]
      break;
 80035bc:	e001      	b.n	80035c2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80035c2:	bf00      	nop
  }
}
 80035c4:	bf00      	nop
 80035c6:	3728      	adds	r7, #40	@ 0x28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80035f8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	d10b      	bne.n	800361c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d102      	bne.n	8003614 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f004 ff3e 	bl	8008490 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f043 0302 	orr.w	r3, r3, #2
 800361a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b08      	cmp	r3, #8
 8003624:	d132      	bne.n	800368c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f043 0308 	orr.w	r3, r3, #8
 800362c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b04      	cmp	r3, #4
 8003636:	d126      	bne.n	8003686 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7a5b      	ldrb	r3, [r3, #9]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d113      	bne.n	8003668 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003646:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800364a:	d106      	bne.n	800365a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2102      	movs	r1, #2
 8003652:	4618      	mov	r0, r3
 8003654:	f001 ff60 	bl	8005518 <USB_InitFSLSPClkSel>
 8003658:	e011      	b.n	800367e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2101      	movs	r1, #1
 8003660:	4618      	mov	r0, r3
 8003662:	f001 ff59 	bl	8005518 <USB_InitFSLSPClkSel>
 8003666:	e00a      	b.n	800367e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	79db      	ldrb	r3, [r3, #7]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d106      	bne.n	800367e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003676:	461a      	mov	r2, r3
 8003678:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800367c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f004 ff30 	bl	80084e4 <HAL_HCD_PortEnabled_Callback>
 8003684:	e002      	b.n	800368c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f004 ff3a 	bl	8008500 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b20      	cmp	r3, #32
 8003694:	d103      	bne.n	800369e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f043 0320 	orr.w	r3, r3, #32
 800369c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036a4:	461a      	mov	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	6013      	str	r3, [r2, #0]
}
 80036aa:	bf00      	nop
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e12b      	b.n	800391e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd f982 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2224      	movs	r2, #36	@ 0x24
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003718:	f001 fa20 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 800371c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a81      	ldr	r2, [pc, #516]	@ (8003928 <HAL_I2C_Init+0x274>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d807      	bhi.n	8003738 <HAL_I2C_Init+0x84>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4a80      	ldr	r2, [pc, #512]	@ (800392c <HAL_I2C_Init+0x278>)
 800372c:	4293      	cmp	r3, r2
 800372e:	bf94      	ite	ls
 8003730:	2301      	movls	r3, #1
 8003732:	2300      	movhi	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e006      	b.n	8003746 <HAL_I2C_Init+0x92>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a7d      	ldr	r2, [pc, #500]	@ (8003930 <HAL_I2C_Init+0x27c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	bf94      	ite	ls
 8003740:	2301      	movls	r3, #1
 8003742:	2300      	movhi	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0e7      	b.n	800391e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a78      	ldr	r2, [pc, #480]	@ (8003934 <HAL_I2C_Init+0x280>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	0c9b      	lsrs	r3, r3, #18
 8003758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4a6a      	ldr	r2, [pc, #424]	@ (8003928 <HAL_I2C_Init+0x274>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d802      	bhi.n	8003788 <HAL_I2C_Init+0xd4>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	3301      	adds	r3, #1
 8003786:	e009      	b.n	800379c <HAL_I2C_Init+0xe8>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	4a69      	ldr	r2, [pc, #420]	@ (8003938 <HAL_I2C_Init+0x284>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	099b      	lsrs	r3, r3, #6
 800379a:	3301      	adds	r3, #1
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	495c      	ldr	r1, [pc, #368]	@ (8003928 <HAL_I2C_Init+0x274>)
 80037b8:	428b      	cmp	r3, r1
 80037ba:	d819      	bhi.n	80037f0 <HAL_I2C_Init+0x13c>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1e59      	subs	r1, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ca:	1c59      	adds	r1, r3, #1
 80037cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037d0:	400b      	ands	r3, r1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_I2C_Init+0x138>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1e59      	subs	r1, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ea:	e051      	b.n	8003890 <HAL_I2C_Init+0x1dc>
 80037ec:	2304      	movs	r3, #4
 80037ee:	e04f      	b.n	8003890 <HAL_I2C_Init+0x1dc>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d111      	bne.n	800381c <HAL_I2C_Init+0x168>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1e58      	subs	r0, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	440b      	add	r3, r1
 8003806:	fbb0 f3f3 	udiv	r3, r0, r3
 800380a:	3301      	adds	r3, #1
 800380c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e012      	b.n	8003842 <HAL_I2C_Init+0x18e>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1e58      	subs	r0, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	0099      	lsls	r1, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003832:	3301      	adds	r3, #1
 8003834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Init+0x196>
 8003846:	2301      	movs	r3, #1
 8003848:	e022      	b.n	8003890 <HAL_I2C_Init+0x1dc>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10e      	bne.n	8003870 <HAL_I2C_Init+0x1bc>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1e58      	subs	r0, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	460b      	mov	r3, r1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	440b      	add	r3, r1
 8003860:	fbb0 f3f3 	udiv	r3, r0, r3
 8003864:	3301      	adds	r3, #1
 8003866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800386e:	e00f      	b.n	8003890 <HAL_I2C_Init+0x1dc>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1e58      	subs	r0, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	0099      	lsls	r1, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	fbb0 f3f3 	udiv	r3, r0, r3
 8003886:	3301      	adds	r3, #1
 8003888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	6809      	ldr	r1, [r1, #0]
 8003894:	4313      	orrs	r3, r2
 8003896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6911      	ldr	r1, [r2, #16]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68d2      	ldr	r2, [r2, #12]
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	000186a0 	.word	0x000186a0
 800392c:	001e847f 	.word	0x001e847f
 8003930:	003d08ff 	.word	0x003d08ff
 8003934:	431bde83 	.word	0x431bde83
 8003938:	10624dd3 	.word	0x10624dd3

0800393c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e128      	b.n	8003ba0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a90      	ldr	r2, [pc, #576]	@ (8003ba8 <HAL_I2S_Init+0x26c>)
 8003966:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7fd f883 	bl	8000a74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2202      	movs	r2, #2
 8003972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003984:	f023 030f 	bic.w	r3, r3, #15
 8003988:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2202      	movs	r2, #2
 8003990:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d060      	beq.n	8003a5c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039a2:	2310      	movs	r3, #16
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	e001      	b.n	80039ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039a8:	2320      	movs	r3, #32
 80039aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d802      	bhi.n	80039ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039ba:	2001      	movs	r0, #1
 80039bc:	f001 f9c4 	bl	8004d48 <HAL_RCCEx_GetPeriphCLKFreq>
 80039c0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ca:	d125      	bne.n	8003a18 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	fbb2 f2f3 	udiv	r2, r2, r3
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	461a      	mov	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	3305      	adds	r3, #5
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	e01f      	b.n	8003a36 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	461a      	mov	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	3305      	adds	r3, #5
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	e00e      	b.n	8003a36 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	461a      	mov	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	3305      	adds	r3, #5
 8003a34:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4a5c      	ldr	r2, [pc, #368]	@ (8003bac <HAL_I2S_Init+0x270>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	08db      	lsrs	r3, r3, #3
 8003a40:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	e003      	b.n	8003a64 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d902      	bls.n	8003a70 <HAL_I2S_Init+0x134>
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2bff      	cmp	r3, #255	@ 0xff
 8003a6e:	d907      	bls.n	8003a80 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a74:	f043 0210 	orr.w	r2, r3, #16
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e08f      	b.n	8003ba0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	ea42 0103 	orr.w	r1, r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a9e:	f023 030f 	bic.w	r3, r3, #15
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6851      	ldr	r1, [r2, #4]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6892      	ldr	r2, [r2, #8]
 8003aaa:	4311      	orrs	r1, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68d2      	ldr	r2, [r2, #12]
 8003ab0:	4311      	orrs	r1, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6992      	ldr	r2, [r2, #24]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ac2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d161      	bne.n	8003b90 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a38      	ldr	r2, [pc, #224]	@ (8003bb0 <HAL_I2S_Init+0x274>)
 8003ad0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a37      	ldr	r2, [pc, #220]	@ (8003bb4 <HAL_I2S_Init+0x278>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <HAL_I2S_Init+0x1a4>
 8003adc:	4b36      	ldr	r3, [pc, #216]	@ (8003bb8 <HAL_I2S_Init+0x27c>)
 8003ade:	e001      	b.n	8003ae4 <HAL_I2S_Init+0x1a8>
 8003ae0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	4932      	ldr	r1, [pc, #200]	@ (8003bb4 <HAL_I2S_Init+0x278>)
 8003aec:	428a      	cmp	r2, r1
 8003aee:	d101      	bne.n	8003af4 <HAL_I2S_Init+0x1b8>
 8003af0:	4a31      	ldr	r2, [pc, #196]	@ (8003bb8 <HAL_I2S_Init+0x27c>)
 8003af2:	e001      	b.n	8003af8 <HAL_I2S_Init+0x1bc>
 8003af4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003af8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003afc:	f023 030f 	bic.w	r3, r3, #15
 8003b00:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb4 <HAL_I2S_Init+0x278>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_I2S_Init+0x1d4>
 8003b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb8 <HAL_I2S_Init+0x27c>)
 8003b0e:	e001      	b.n	8003b14 <HAL_I2S_Init+0x1d8>
 8003b10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b14:	2202      	movs	r2, #2
 8003b16:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a25      	ldr	r2, [pc, #148]	@ (8003bb4 <HAL_I2S_Init+0x278>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <HAL_I2S_Init+0x1ea>
 8003b22:	4b25      	ldr	r3, [pc, #148]	@ (8003bb8 <HAL_I2S_Init+0x27c>)
 8003b24:	e001      	b.n	8003b2a <HAL_I2S_Init+0x1ee>
 8003b26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b36:	d003      	beq.n	8003b40 <HAL_I2S_Init+0x204>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d103      	bne.n	8003b48 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	e001      	b.n	8003b4c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b56:	4313      	orrs	r3, r2
 8003b58:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b60:	4313      	orrs	r3, r2
 8003b62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	897b      	ldrh	r3, [r7, #10]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b78:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003bb4 <HAL_I2S_Init+0x278>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_I2S_Init+0x24c>
 8003b84:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb8 <HAL_I2S_Init+0x27c>)
 8003b86:	e001      	b.n	8003b8c <HAL_I2S_Init+0x250>
 8003b88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b8c:	897a      	ldrh	r2, [r7, #10]
 8003b8e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	08003cb3 	.word	0x08003cb3
 8003bac:	cccccccd 	.word	0xcccccccd
 8003bb0:	08003dc9 	.word	0x08003dc9
 8003bb4:	40003800 	.word	0x40003800
 8003bb8:	40003400 	.word	0x40003400

08003bbc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	1c9a      	adds	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10e      	bne.n	8003c4c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c3c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff ffb8 	bl	8003bbc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	b292      	uxth	r2, r2
 8003c68:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	1c9a      	adds	r2, r3, #2
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10e      	bne.n	8003caa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c9a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff93 	bl	8003bd0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d13a      	bne.n	8003d44 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d109      	bne.n	8003cec <I2S_IRQHandler+0x3a>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d102      	bne.n	8003cec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ffb4 	bl	8003c54 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf2:	2b40      	cmp	r3, #64	@ 0x40
 8003cf4:	d126      	bne.n	8003d44 <I2S_IRQHandler+0x92>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d11f      	bne.n	8003d44 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d14:	2300      	movs	r3, #0
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d36:	f043 0202 	orr.w	r2, r3, #2
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff ff50 	bl	8003be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d136      	bne.n	8003dbe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d109      	bne.n	8003d6e <I2S_IRQHandler+0xbc>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d64:	2b80      	cmp	r3, #128	@ 0x80
 8003d66:	d102      	bne.n	8003d6e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ff45 	bl	8003bf8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d122      	bne.n	8003dbe <I2S_IRQHandler+0x10c>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d11b      	bne.n	8003dbe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d94:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db0:	f043 0204 	orr.w	r2, r3, #4
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff ff13 	bl	8003be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a92      	ldr	r2, [pc, #584]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003de2:	4b92      	ldr	r3, [pc, #584]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003de4:	e001      	b.n	8003dea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003de6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a8b      	ldr	r2, [pc, #556]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d101      	bne.n	8003e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e00:	4b8a      	ldr	r3, [pc, #552]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e02:	e001      	b.n	8003e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e14:	d004      	beq.n	8003e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 8099 	bne.w	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d107      	bne.n	8003e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f925 	bl	8004084 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d107      	bne.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f9c8 	bl	80041e4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5a:	2b40      	cmp	r3, #64	@ 0x40
 8003e5c:	d13a      	bne.n	8003ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d035      	beq.n	8003ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e72:	4b6e      	ldr	r3, [pc, #440]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e74:	e001      	b.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4969      	ldr	r1, [pc, #420]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e82:	428b      	cmp	r3, r1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e86:	4b69      	ldr	r3, [pc, #420]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e88:	e001      	b.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e92:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ea2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	f043 0202 	orr.w	r2, r3, #2
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fe88 	bl	8003be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	f040 80c3 	bne.w	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80bd 	beq.w	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003efa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a49      	ldr	r2, [pc, #292]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d101      	bne.n	8003f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f06:	4b49      	ldr	r3, [pc, #292]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f08:	e001      	b.n	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4944      	ldr	r1, [pc, #272]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f16:	428b      	cmp	r3, r1
 8003f18:	d101      	bne.n	8003f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f1a:	4b44      	ldr	r3, [pc, #272]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f1c:	e001      	b.n	8003f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f22:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f26:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fe4a 	bl	8003be4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f50:	e089      	b.n	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d107      	bne.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f8be 	bl	80040e8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d107      	bne.n	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f8fd 	bl	8004180 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8c:	2b40      	cmp	r3, #64	@ 0x40
 8003f8e:	d12f      	bne.n	8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02a      	beq.n	8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fa8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1e      	ldr	r2, [pc, #120]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d101      	bne.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fb6:	e001      	b.n	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4919      	ldr	r1, [pc, #100]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fc4:	428b      	cmp	r3, r1
 8003fc6:	d101      	bne.n	8003fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003fc8:	4b18      	ldr	r3, [pc, #96]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fca:	e001      	b.n	8003fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003fcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fd0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fd4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe2:	f043 0202 	orr.w	r2, r3, #2
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fdfa 	bl	8003be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d136      	bne.n	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d031      	beq.n	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a07      	ldr	r2, [pc, #28]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800400e:	4b07      	ldr	r3, [pc, #28]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004010:	e001      	b.n	8004016 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004012:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4902      	ldr	r1, [pc, #8]	@ (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800401e:	428b      	cmp	r3, r1
 8004020:	d106      	bne.n	8004030 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004022:	4b02      	ldr	r3, [pc, #8]	@ (800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004024:	e006      	b.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004026:	bf00      	nop
 8004028:	40003800 	.word	0x40003800
 800402c:	40003400 	.word	0x40003400
 8004030:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004034:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004038:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004048:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	f043 0204 	orr.w	r2, r3, #4
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff fdc0 	bl	8003be4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004064:	e000      	b.n	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004066:	bf00      	nop
}
 8004068:	bf00      	nop
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	1c99      	adds	r1, r3, #2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6251      	str	r1, [r2, #36]	@ 0x24
 8004096:	881a      	ldrh	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d113      	bne.n	80040de <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ffc9 	bl	8004070 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c99      	adds	r1, r3, #2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6251      	str	r1, [r2, #36]	@ 0x24
 80040fa:	8819      	ldrh	r1, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1d      	ldr	r2, [pc, #116]	@ (8004178 <I2SEx_TxISR_I2SExt+0x90>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <I2SEx_TxISR_I2SExt+0x22>
 8004106:	4b1d      	ldr	r3, [pc, #116]	@ (800417c <I2SEx_TxISR_I2SExt+0x94>)
 8004108:	e001      	b.n	800410e <I2SEx_TxISR_I2SExt+0x26>
 800410a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800410e:	460a      	mov	r2, r1
 8004110:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d121      	bne.n	800416e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a12      	ldr	r2, [pc, #72]	@ (8004178 <I2SEx_TxISR_I2SExt+0x90>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d101      	bne.n	8004138 <I2SEx_TxISR_I2SExt+0x50>
 8004134:	4b11      	ldr	r3, [pc, #68]	@ (800417c <I2SEx_TxISR_I2SExt+0x94>)
 8004136:	e001      	b.n	800413c <I2SEx_TxISR_I2SExt+0x54>
 8004138:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	490d      	ldr	r1, [pc, #52]	@ (8004178 <I2SEx_TxISR_I2SExt+0x90>)
 8004144:	428b      	cmp	r3, r1
 8004146:	d101      	bne.n	800414c <I2SEx_TxISR_I2SExt+0x64>
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <I2SEx_TxISR_I2SExt+0x94>)
 800414a:	e001      	b.n	8004150 <I2SEx_TxISR_I2SExt+0x68>
 800414c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004150:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004154:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ff81 	bl	8004070 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40003800 	.word	0x40003800
 800417c:	40003400 	.word	0x40003400

08004180 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68d8      	ldr	r0, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	1c99      	adds	r1, r3, #2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004198:	b282      	uxth	r2, r0
 800419a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d113      	bne.n	80041dc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041c2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ff4a 	bl	8004070 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a20      	ldr	r2, [pc, #128]	@ (8004274 <I2SEx_RxISR_I2SExt+0x90>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d101      	bne.n	80041fa <I2SEx_RxISR_I2SExt+0x16>
 80041f6:	4b20      	ldr	r3, [pc, #128]	@ (8004278 <I2SEx_RxISR_I2SExt+0x94>)
 80041f8:	e001      	b.n	80041fe <I2SEx_RxISR_I2SExt+0x1a>
 80041fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041fe:	68d8      	ldr	r0, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	1c99      	adds	r1, r3, #2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800420a:	b282      	uxth	r2, r0
 800420c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d121      	bne.n	800426a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a12      	ldr	r2, [pc, #72]	@ (8004274 <I2SEx_RxISR_I2SExt+0x90>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <I2SEx_RxISR_I2SExt+0x50>
 8004230:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <I2SEx_RxISR_I2SExt+0x94>)
 8004232:	e001      	b.n	8004238 <I2SEx_RxISR_I2SExt+0x54>
 8004234:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	490d      	ldr	r1, [pc, #52]	@ (8004274 <I2SEx_RxISR_I2SExt+0x90>)
 8004240:	428b      	cmp	r3, r1
 8004242:	d101      	bne.n	8004248 <I2SEx_RxISR_I2SExt+0x64>
 8004244:	4b0c      	ldr	r3, [pc, #48]	@ (8004278 <I2SEx_RxISR_I2SExt+0x94>)
 8004246:	e001      	b.n	800424c <I2SEx_RxISR_I2SExt+0x68>
 8004248:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800424c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004250:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d106      	bne.n	800426a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff ff03 	bl	8004070 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40003800 	.word	0x40003800
 8004278:	40003400 	.word	0x40003400

0800427c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e267      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d075      	beq.n	8004386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800429a:	4b88      	ldr	r3, [pc, #544]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d00c      	beq.n	80042c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042a6:	4b85      	ldr	r3, [pc, #532]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d112      	bne.n	80042d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b2:	4b82      	ldr	r3, [pc, #520]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042be:	d10b      	bne.n	80042d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c0:	4b7e      	ldr	r3, [pc, #504]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d05b      	beq.n	8004384 <HAL_RCC_OscConfig+0x108>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d157      	bne.n	8004384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e242      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042e0:	d106      	bne.n	80042f0 <HAL_RCC_OscConfig+0x74>
 80042e2:	4b76      	ldr	r3, [pc, #472]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a75      	ldr	r2, [pc, #468]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e01d      	b.n	800432c <HAL_RCC_OscConfig+0xb0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCC_OscConfig+0x98>
 80042fa:	4b70      	ldr	r3, [pc, #448]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a6f      	ldr	r2, [pc, #444]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b6d      	ldr	r3, [pc, #436]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a6c      	ldr	r2, [pc, #432]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e00b      	b.n	800432c <HAL_RCC_OscConfig+0xb0>
 8004314:	4b69      	ldr	r3, [pc, #420]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a68      	ldr	r2, [pc, #416]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 800431a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4b66      	ldr	r3, [pc, #408]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a65      	ldr	r2, [pc, #404]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800432a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d013      	beq.n	800435c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fc fd78 	bl	8000e28 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433c:	f7fc fd74 	bl	8000e28 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	@ 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e207      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b5b      	ldr	r3, [pc, #364]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0xc0>
 800435a:	e014      	b.n	8004386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7fc fd64 	bl	8000e28 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004364:	f7fc fd60 	bl	8000e28 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	@ 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e1f3      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004376:	4b51      	ldr	r3, [pc, #324]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0xe8>
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d063      	beq.n	800445a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004392:	4b4a      	ldr	r3, [pc, #296]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800439e:	4b47      	ldr	r3, [pc, #284]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d11c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043aa:	4b44      	ldr	r3, [pc, #272]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d116      	bne.n	80043e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	4b41      	ldr	r3, [pc, #260]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_RCC_OscConfig+0x152>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e1c7      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ce:	4b3b      	ldr	r3, [pc, #236]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4937      	ldr	r1, [pc, #220]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	e03a      	b.n	800445a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d020      	beq.n	800442e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ec:	4b34      	ldr	r3, [pc, #208]	@ (80044c0 <HAL_RCC_OscConfig+0x244>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fc fd19 	bl	8000e28 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043fa:	f7fc fd15 	bl	8000e28 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e1a8      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440c:	4b2b      	ldr	r3, [pc, #172]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004418:	4b28      	ldr	r3, [pc, #160]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	4925      	ldr	r1, [pc, #148]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004428:	4313      	orrs	r3, r2
 800442a:	600b      	str	r3, [r1, #0]
 800442c:	e015      	b.n	800445a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800442e:	4b24      	ldr	r3, [pc, #144]	@ (80044c0 <HAL_RCC_OscConfig+0x244>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fc fcf8 	bl	8000e28 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443c:	f7fc fcf4 	bl	8000e28 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e187      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444e:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d036      	beq.n	80044d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d016      	beq.n	800449c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800446e:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <HAL_RCC_OscConfig+0x248>)
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004474:	f7fc fcd8 	bl	8000e28 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800447c:	f7fc fcd4 	bl	8000e28 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e167      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448e:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <HAL_RCC_OscConfig+0x240>)
 8004490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f0      	beq.n	800447c <HAL_RCC_OscConfig+0x200>
 800449a:	e01b      	b.n	80044d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800449c:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <HAL_RCC_OscConfig+0x248>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a2:	f7fc fcc1 	bl	8000e28 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a8:	e00e      	b.n	80044c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044aa:	f7fc fcbd 	bl	8000e28 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d907      	bls.n	80044c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e150      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
 80044bc:	40023800 	.word	0x40023800
 80044c0:	42470000 	.word	0x42470000
 80044c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c8:	4b88      	ldr	r3, [pc, #544]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80044ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1ea      	bne.n	80044aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8097 	beq.w	8004610 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e6:	4b81      	ldr	r3, [pc, #516]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	4b7d      	ldr	r3, [pc, #500]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	4a7c      	ldr	r2, [pc, #496]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	@ 0x40
 8004502:	4b7a      	ldr	r3, [pc, #488]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	4b77      	ldr	r3, [pc, #476]	@ (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d118      	bne.n	8004550 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451e:	4b74      	ldr	r3, [pc, #464]	@ (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a73      	ldr	r2, [pc, #460]	@ (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452a:	f7fc fc7d 	bl	8000e28 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004532:	f7fc fc79 	bl	8000e28 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e10c      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	4b6a      	ldr	r3, [pc, #424]	@ (80046f0 <HAL_RCC_OscConfig+0x474>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d106      	bne.n	8004566 <HAL_RCC_OscConfig+0x2ea>
 8004558:	4b64      	ldr	r3, [pc, #400]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455c:	4a63      	ldr	r2, [pc, #396]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6713      	str	r3, [r2, #112]	@ 0x70
 8004564:	e01c      	b.n	80045a0 <HAL_RCC_OscConfig+0x324>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b05      	cmp	r3, #5
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x30c>
 800456e:	4b5f      	ldr	r3, [pc, #380]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004572:	4a5e      	ldr	r2, [pc, #376]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004574:	f043 0304 	orr.w	r3, r3, #4
 8004578:	6713      	str	r3, [r2, #112]	@ 0x70
 800457a:	4b5c      	ldr	r3, [pc, #368]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	4a5b      	ldr	r2, [pc, #364]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6713      	str	r3, [r2, #112]	@ 0x70
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0x324>
 8004588:	4b58      	ldr	r3, [pc, #352]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458c:	4a57      	ldr	r2, [pc, #348]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	6713      	str	r3, [r2, #112]	@ 0x70
 8004594:	4b55      	ldr	r3, [pc, #340]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004598:	4a54      	ldr	r2, [pc, #336]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800459a:	f023 0304 	bic.w	r3, r3, #4
 800459e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d015      	beq.n	80045d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fc fc3e 	bl	8000e28 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ae:	e00a      	b.n	80045c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b0:	f7fc fc3a 	bl	8000e28 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045be:	4293      	cmp	r3, r2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e0cb      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c6:	4b49      	ldr	r3, [pc, #292]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0ee      	beq.n	80045b0 <HAL_RCC_OscConfig+0x334>
 80045d2:	e014      	b.n	80045fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d4:	f7fc fc28 	bl	8000e28 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045dc:	f7fc fc24 	bl	8000e28 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e0b5      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f2:	4b3e      	ldr	r3, [pc, #248]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1ee      	bne.n	80045dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d105      	bne.n	8004610 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004604:	4b39      	ldr	r3, [pc, #228]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004608:	4a38      	ldr	r2, [pc, #224]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800460a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800460e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80a1 	beq.w	800475c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800461a:	4b34      	ldr	r3, [pc, #208]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b08      	cmp	r3, #8
 8004624:	d05c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d141      	bne.n	80046b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800462e:	4b31      	ldr	r3, [pc, #196]	@ (80046f4 <HAL_RCC_OscConfig+0x478>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fc fbf8 	bl	8000e28 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463c:	f7fc fbf4 	bl	8000e28 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e087      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464e:	4b27      	ldr	r3, [pc, #156]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	019b      	lsls	r3, r3, #6
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	3b01      	subs	r3, #1
 8004674:	041b      	lsls	r3, r3, #16
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	061b      	lsls	r3, r3, #24
 800467e:	491b      	ldr	r1, [pc, #108]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 8004680:	4313      	orrs	r3, r2
 8004682:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004684:	4b1b      	ldr	r3, [pc, #108]	@ (80046f4 <HAL_RCC_OscConfig+0x478>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468a:	f7fc fbcd 	bl	8000e28 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004692:	f7fc fbc9 	bl	8000e28 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e05c      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a4:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x416>
 80046b0:	e054      	b.n	800475c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b2:	4b10      	ldr	r3, [pc, #64]	@ (80046f4 <HAL_RCC_OscConfig+0x478>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fc fbb6 	bl	8000e28 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fc fbb2 	bl	8000e28 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e045      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	4b06      	ldr	r3, [pc, #24]	@ (80046ec <HAL_RCC_OscConfig+0x470>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x444>
 80046de:	e03d      	b.n	800475c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e038      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40007000 	.word	0x40007000
 80046f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004768 <HAL_RCC_OscConfig+0x4ec>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d028      	beq.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d121      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d11a      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004728:	4013      	ands	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800472e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004730:	4293      	cmp	r3, r2
 8004732:	d111      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	3b01      	subs	r3, #1
 8004742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d107      	bne.n	8004758 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800

0800476c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e0cc      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004780:	4b68      	ldr	r3, [pc, #416]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d90c      	bls.n	80047a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b65      	ldr	r3, [pc, #404]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b63      	ldr	r3, [pc, #396]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0b8      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c0:	4b59      	ldr	r3, [pc, #356]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a58      	ldr	r2, [pc, #352]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047d8:	4b53      	ldr	r3, [pc, #332]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a52      	ldr	r2, [pc, #328]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e4:	4b50      	ldr	r3, [pc, #320]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	494d      	ldr	r1, [pc, #308]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d044      	beq.n	800488c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	4b47      	ldr	r3, [pc, #284]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d119      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e07f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d003      	beq.n	800482a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004826:	2b03      	cmp	r3, #3
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482a:	4b3f      	ldr	r3, [pc, #252]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e06f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483a:	4b3b      	ldr	r3, [pc, #236]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e067      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484a:	4b37      	ldr	r3, [pc, #220]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f023 0203 	bic.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4934      	ldr	r1, [pc, #208]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	4313      	orrs	r3, r2
 800485a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800485c:	f7fc fae4 	bl	8000e28 <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	e00a      	b.n	800487a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004864:	f7fc fae0 	bl	8000e28 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e04f      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487a:	4b2b      	ldr	r3, [pc, #172]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 020c 	and.w	r2, r3, #12
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	429a      	cmp	r2, r3
 800488a:	d1eb      	bne.n	8004864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800488c:	4b25      	ldr	r3, [pc, #148]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d20c      	bcs.n	80048b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b22      	ldr	r3, [pc, #136]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b20      	ldr	r3, [pc, #128]	@ (8004924 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e032      	b.n	800491a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c0:	4b19      	ldr	r3, [pc, #100]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4916      	ldr	r1, [pc, #88]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048de:	4b12      	ldr	r3, [pc, #72]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	490e      	ldr	r1, [pc, #56]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048f2:	f000 f821 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80048f6:	4602      	mov	r2, r0
 80048f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	490a      	ldr	r1, [pc, #40]	@ (800492c <HAL_RCC_ClockConfig+0x1c0>)
 8004904:	5ccb      	ldrb	r3, [r1, r3]
 8004906:	fa22 f303 	lsr.w	r3, r2, r3
 800490a:	4a09      	ldr	r2, [pc, #36]	@ (8004930 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800490e:	4b09      	ldr	r3, [pc, #36]	@ (8004934 <HAL_RCC_ClockConfig+0x1c8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7fc fa44 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40023c00 	.word	0x40023c00
 8004928:	40023800 	.word	0x40023800
 800492c:	08008bbc 	.word	0x08008bbc
 8004930:	20000000 	.word	0x20000000
 8004934:	20000004 	.word	0x20000004

08004938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800493c:	b094      	sub	sp, #80	@ 0x50
 800493e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004950:	4b79      	ldr	r3, [pc, #484]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b08      	cmp	r3, #8
 800495a:	d00d      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x40>
 800495c:	2b08      	cmp	r3, #8
 800495e:	f200 80e1 	bhi.w	8004b24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0x34>
 8004966:	2b04      	cmp	r3, #4
 8004968:	d003      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0x3a>
 800496a:	e0db      	b.n	8004b24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800496c:	4b73      	ldr	r3, [pc, #460]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x204>)
 800496e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004970:	e0db      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004972:	4b73      	ldr	r3, [pc, #460]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x208>)
 8004974:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004976:	e0d8      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004978:	4b6f      	ldr	r3, [pc, #444]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004980:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004982:	4b6d      	ldr	r3, [pc, #436]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d063      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800498e:	4b6a      	ldr	r3, [pc, #424]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	099b      	lsrs	r3, r3, #6
 8004994:	2200      	movs	r2, #0
 8004996:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004998:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049a2:	2300      	movs	r3, #0
 80049a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049aa:	4622      	mov	r2, r4
 80049ac:	462b      	mov	r3, r5
 80049ae:	f04f 0000 	mov.w	r0, #0
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	0159      	lsls	r1, r3, #5
 80049b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049bc:	0150      	lsls	r0, r2, #5
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4621      	mov	r1, r4
 80049c4:	1a51      	subs	r1, r2, r1
 80049c6:	6139      	str	r1, [r7, #16]
 80049c8:	4629      	mov	r1, r5
 80049ca:	eb63 0301 	sbc.w	r3, r3, r1
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049dc:	4659      	mov	r1, fp
 80049de:	018b      	lsls	r3, r1, #6
 80049e0:	4651      	mov	r1, sl
 80049e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049e6:	4651      	mov	r1, sl
 80049e8:	018a      	lsls	r2, r1, #6
 80049ea:	4651      	mov	r1, sl
 80049ec:	ebb2 0801 	subs.w	r8, r2, r1
 80049f0:	4659      	mov	r1, fp
 80049f2:	eb63 0901 	sbc.w	r9, r3, r1
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a0a:	4690      	mov	r8, r2
 8004a0c:	4699      	mov	r9, r3
 8004a0e:	4623      	mov	r3, r4
 8004a10:	eb18 0303 	adds.w	r3, r8, r3
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	462b      	mov	r3, r5
 8004a18:	eb49 0303 	adc.w	r3, r9, r3
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	024b      	lsls	r3, r1, #9
 8004a2e:	4621      	mov	r1, r4
 8004a30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a34:	4621      	mov	r1, r4
 8004a36:	024a      	lsls	r2, r1, #9
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a3e:	2200      	movs	r2, #0
 8004a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a48:	f7fb fbbe 	bl	80001c8 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4613      	mov	r3, r2
 8004a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a54:	e058      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a56:	4b38      	ldr	r3, [pc, #224]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	099b      	lsrs	r3, r3, #6
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	4611      	mov	r1, r2
 8004a62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a66:	623b      	str	r3, [r7, #32]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a70:	4642      	mov	r2, r8
 8004a72:	464b      	mov	r3, r9
 8004a74:	f04f 0000 	mov.w	r0, #0
 8004a78:	f04f 0100 	mov.w	r1, #0
 8004a7c:	0159      	lsls	r1, r3, #5
 8004a7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a82:	0150      	lsls	r0, r2, #5
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4641      	mov	r1, r8
 8004a8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a8e:	4649      	mov	r1, r9
 8004a90:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004aa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004aa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004aa8:	ebb2 040a 	subs.w	r4, r2, sl
 8004aac:	eb63 050b 	sbc.w	r5, r3, fp
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	00eb      	lsls	r3, r5, #3
 8004aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004abe:	00e2      	lsls	r2, r4, #3
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	461d      	mov	r5, r3
 8004ac4:	4643      	mov	r3, r8
 8004ac6:	18e3      	adds	r3, r4, r3
 8004ac8:	603b      	str	r3, [r7, #0]
 8004aca:	464b      	mov	r3, r9
 8004acc:	eb45 0303 	adc.w	r3, r5, r3
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ade:	4629      	mov	r1, r5
 8004ae0:	028b      	lsls	r3, r1, #10
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ae8:	4621      	mov	r1, r4
 8004aea:	028a      	lsls	r2, r1, #10
 8004aec:	4610      	mov	r0, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004af2:	2200      	movs	r2, #0
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	61fa      	str	r2, [r7, #28]
 8004af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004afc:	f7fb fb64 	bl	80001c8 <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4613      	mov	r3, r2
 8004b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b08:	4b0b      	ldr	r3, [pc, #44]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	3301      	adds	r3, #1
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b22:	e002      	b.n	8004b2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3750      	adds	r7, #80	@ 0x50
 8004b30:	46bd      	mov	sp, r7
 8004b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	00f42400 	.word	0x00f42400
 8004b40:	007a1200 	.word	0x007a1200

08004b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b48:	4b03      	ldr	r3, [pc, #12]	@ (8004b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20000000 	.word	0x20000000

08004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b60:	f7ff fff0 	bl	8004b44 <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	0a9b      	lsrs	r3, r3, #10
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4903      	ldr	r1, [pc, #12]	@ (8004b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	08008bcc 	.word	0x08008bcc

08004b84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d035      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bac:	4b62      	ldr	r3, [pc, #392]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb2:	f7fc f939 	bl	8000e28 <HAL_GetTick>
 8004bb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bba:	f7fc f935 	bl	8000e28 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e0b0      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f0      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	019a      	lsls	r2, r3, #6
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	071b      	lsls	r3, r3, #28
 8004be4:	4955      	ldr	r1, [pc, #340]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bec:	4b52      	ldr	r3, [pc, #328]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf2:	f7fc f919 	bl	8000e28 <HAL_GetTick>
 8004bf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bfa:	f7fc f915 	bl	8000e28 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e090      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0f0      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8083 	beq.w	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	4b44      	ldr	r3, [pc, #272]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	4a43      	ldr	r2, [pc, #268]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c36:	4b41      	ldr	r3, [pc, #260]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c42:	4b3f      	ldr	r3, [pc, #252]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a3e      	ldr	r2, [pc, #248]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c4e:	f7fc f8eb 	bl	8000e28 <HAL_GetTick>
 8004c52:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c54:	e008      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c56:	f7fc f8e7 	bl	8000e28 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e062      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c68:	4b35      	ldr	r3, [pc, #212]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c74:	4b31      	ldr	r3, [pc, #196]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c7c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d02f      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d028      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c92:	4b2a      	ldr	r3, [pc, #168]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c9a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c9c:	4b29      	ldr	r3, [pc, #164]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca2:	4b28      	ldr	r3, [pc, #160]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ca8:	4a24      	ldr	r2, [pc, #144]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cae:	4b23      	ldr	r3, [pc, #140]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d114      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cba:	f7fc f8b5 	bl	8000e28 <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fc f8b1 	bl	8000e28 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e02a      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd8:	4b18      	ldr	r3, [pc, #96]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0ee      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf0:	d10d      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cf2:	4b12      	ldr	r3, [pc, #72]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d06:	490d      	ldr	r1, [pc, #52]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	608b      	str	r3, [r1, #8]
 8004d0c:	e005      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	4a0a      	ldr	r2, [pc, #40]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d14:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d18:	6093      	str	r3, [r2, #8]
 8004d1a:	4b08      	ldr	r3, [pc, #32]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d26:	4905      	ldr	r1, [pc, #20]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	42470068 	.word	0x42470068
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	40007000 	.word	0x40007000
 8004d44:	42470e40 	.word	0x42470e40

08004d48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d13f      	bne.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d66:	4b24      	ldr	r3, [pc, #144]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d6e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d006      	beq.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d7c:	d12f      	bne.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d80:	617b      	str	r3, [r7, #20]
          break;
 8004d82:	e02f      	b.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d84:	4b1c      	ldr	r3, [pc, #112]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d90:	d108      	bne.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d92:	4b19      	ldr	r3, [pc, #100]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d9a:	4a19      	ldr	r2, [pc, #100]	@ (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	e007      	b.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004da4:	4b14      	ldr	r3, [pc, #80]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dac:	4a15      	ldr	r2, [pc, #84]	@ (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004db4:	4b10      	ldr	r3, [pc, #64]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dba:	099b      	lsrs	r3, r3, #6
 8004dbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dce:	0f1b      	lsrs	r3, r3, #28
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dda:	617b      	str	r3, [r7, #20]
          break;
 8004ddc:	e002      	b.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]
          break;
 8004de2:	bf00      	nop
        }
      }
      break;
 8004de4:	e000      	b.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004de6:	bf00      	nop
    }
  }
  return frequency;
 8004de8:	697b      	ldr	r3, [r7, #20]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	00bb8000 	.word	0x00bb8000
 8004e00:	007a1200 	.word	0x007a1200
 8004e04:	00f42400 	.word	0x00f42400

08004e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e07b      	b.n	8004f12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d108      	bne.n	8004e34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e2a:	d009      	beq.n	8004e40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	61da      	str	r2, [r3, #28]
 8004e32:	e005      	b.n	8004e40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fb fe8a 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec4:	ea42 0103 	orr.w	r1, r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ecc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	f003 0104 	and.w	r1, r3, #4
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	f003 0210 	and.w	r2, r3, #16
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	f107 001c 	add.w	r0, r7, #28
 8004f28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f2c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d123      	bne.n	8004f7c <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f5c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d105      	bne.n	8004f70 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f9dc 	bl	800532e <USB_CoreReset>
 8004f76:	4603      	mov	r3, r0
 8004f78:	73fb      	strb	r3, [r7, #15]
 8004f7a:	e01b      	b.n	8004fb4 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 f9d0 	bl	800532e <USB_CoreReset>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f92:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fa6:	e005      	b.n	8004fb4 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004fb4:	7fbb      	ldrb	r3, [r7, #30]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d10b      	bne.n	8004fd2 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f043 0206 	orr.w	r2, r3, #6
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f043 0220 	orr.w	r2, r3, #32
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fde:	b004      	add	sp, #16
 8004fe0:	4770      	bx	lr

08004fe2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f043 0201 	orr.w	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f023 0201 	bic.w	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d115      	bne.n	8005074 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005054:	200a      	movs	r0, #10
 8005056:	f7fb fef3 	bl	8000e40 <HAL_Delay>
      ms += 10U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	330a      	adds	r3, #10
 800505e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f956 	bl	8005312 <USB_GetMode>
 8005066:	4603      	mov	r3, r0
 8005068:	2b01      	cmp	r3, #1
 800506a:	d01e      	beq.n	80050aa <USB_SetCurrentMode+0x84>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005070:	d9f0      	bls.n	8005054 <USB_SetCurrentMode+0x2e>
 8005072:	e01a      	b.n	80050aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d115      	bne.n	80050a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005086:	200a      	movs	r0, #10
 8005088:	f7fb feda 	bl	8000e40 <HAL_Delay>
      ms += 10U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	330a      	adds	r3, #10
 8005090:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f93d 	bl	8005312 <USB_GetMode>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <USB_SetCurrentMode+0x84>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80050a2:	d9f0      	bls.n	8005086 <USB_SetCurrentMode+0x60>
 80050a4:	e001      	b.n	80050aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e005      	b.n	80050b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2bc8      	cmp	r3, #200	@ 0xc8
 80050ae:	d101      	bne.n	80050b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e000      	b.n	80050b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	3301      	adds	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050d8:	d901      	bls.n	80050de <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e01b      	b.n	8005116 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	daf2      	bge.n	80050cc <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	019b      	lsls	r3, r3, #6
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3301      	adds	r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005102:	d901      	bls.n	8005108 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e006      	b.n	8005116 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b20      	cmp	r3, #32
 8005112:	d0f0      	beq.n	80050f6 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005122:	b480      	push	{r7}
 8005124:	b085      	sub	sp, #20
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3301      	adds	r3, #1
 8005132:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800513a:	d901      	bls.n	8005140 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e018      	b.n	8005172 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	daf2      	bge.n	800512e <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2210      	movs	r2, #16
 8005150:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3301      	adds	r3, #1
 8005156:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800515e:	d901      	bls.n	8005164 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e006      	b.n	8005172 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b10      	cmp	r3, #16
 800516e:	d0f0      	beq.n	8005152 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800517e:	b480      	push	{r7}
 8005180:	b089      	sub	sp, #36	@ 0x24
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	4611      	mov	r1, r2
 800518a:	461a      	mov	r2, r3
 800518c:	460b      	mov	r3, r1
 800518e:	71fb      	strb	r3, [r7, #7]
 8005190:	4613      	mov	r3, r2
 8005192:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800519c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d123      	bne.n	80051ec <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051a4:	88bb      	ldrh	r3, [r7, #4]
 80051a6:	3303      	adds	r3, #3
 80051a8:	089b      	lsrs	r3, r3, #2
 80051aa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051ac:	2300      	movs	r3, #0
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	e018      	b.n	80051e4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	031a      	lsls	r2, r3, #12
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051be:	461a      	mov	r2, r3
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	3301      	adds	r3, #1
 80051ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	3301      	adds	r3, #1
 80051d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3301      	adds	r3, #1
 80051d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	3301      	adds	r3, #1
 80051dc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	3301      	adds	r3, #1
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d3e2      	bcc.n	80051b2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3724      	adds	r7, #36	@ 0x24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b08b      	sub	sp, #44	@ 0x2c
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	4613      	mov	r3, r2
 8005206:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	089b      	lsrs	r3, r3, #2
 8005214:	b29b      	uxth	r3, r3
 8005216:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005220:	2300      	movs	r3, #0
 8005222:	623b      	str	r3, [r7, #32]
 8005224:	e014      	b.n	8005250 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	601a      	str	r2, [r3, #0]
    pDest++;
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	3301      	adds	r3, #1
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	3301      	adds	r3, #1
 800523c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	3301      	adds	r3, #1
 8005242:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	3301      	adds	r3, #1
 8005248:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	3301      	adds	r3, #1
 800524e:	623b      	str	r3, [r7, #32]
 8005250:	6a3a      	ldr	r2, [r7, #32]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	429a      	cmp	r2, r3
 8005256:	d3e6      	bcc.n	8005226 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005258:	8bfb      	ldrh	r3, [r7, #30]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01e      	beq.n	800529c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005268:	461a      	mov	r2, r3
 800526a:	f107 0310 	add.w	r3, r7, #16
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	fa22 f303 	lsr.w	r3, r2, r3
 800527e:	b2da      	uxtb	r2, r3
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	701a      	strb	r2, [r3, #0]
      i++;
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	3301      	adds	r3, #1
 8005288:	623b      	str	r3, [r7, #32]
      pDest++;
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	3301      	adds	r3, #1
 800528e:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005290:	8bfb      	ldrh	r3, [r7, #30]
 8005292:	3b01      	subs	r3, #1
 8005294:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005296:	8bfb      	ldrh	r3, [r7, #30]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1ea      	bne.n	8005272 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800529e:	4618      	mov	r0, r3
 80052a0:	372c      	adds	r7, #44	@ 0x2c
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4013      	ands	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052c2:	68fb      	ldr	r3, [r7, #12]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005304:	68bb      	ldr	r3, [r7, #8]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0301 	and.w	r3, r3, #1
}
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3301      	adds	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005346:	d901      	bls.n	800534c <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e01b      	b.n	8005384 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	daf2      	bge.n	800533a <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f043 0201 	orr.w	r2, r3, #1
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005370:	d901      	bls.n	8005376 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e006      	b.n	8005384 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b01      	cmp	r3, #1
 8005380:	d0f0      	beq.n	8005364 <USB_CoreReset+0x36>

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005390:	b084      	sub	sp, #16
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800539e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053b0:	461a      	mov	r2, r3
 80053b2:	2300      	movs	r3, #0
 80053b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d119      	bne.n	800541a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80053e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d10a      	bne.n	8005404 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053fc:	f043 0304 	orr.w	r3, r3, #4
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e014      	b.n	800542e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005412:	f023 0304 	bic.w	r3, r3, #4
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	e009      	b.n	800542e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005428:	f023 0304 	bic.w	r3, r3, #4
 800542c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800542e:	2110      	movs	r1, #16
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fe44 	bl	80050be <USB_FlushTxFifo>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff fe6e 	bl	8005122 <USB_FlushRxFifo>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005450:	2300      	movs	r3, #0
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	e015      	b.n	8005482 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005462:	461a      	mov	r2, r3
 8005464:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005468:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005476:	461a      	mov	r2, r3
 8005478:	2300      	movs	r3, #0
 800547a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	3301      	adds	r3, #1
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005486:	461a      	mov	r2, r3
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4293      	cmp	r3, r2
 800548c:	d3e3      	bcc.n	8005456 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800549a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a18      	ldr	r2, [pc, #96]	@ (8005500 <USB_HostInit+0x170>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d10b      	bne.n	80054bc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054aa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a15      	ldr	r2, [pc, #84]	@ (8005504 <USB_HostInit+0x174>)
 80054b0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a14      	ldr	r2, [pc, #80]	@ (8005508 <USB_HostInit+0x178>)
 80054b6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80054ba:	e009      	b.n	80054d0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2280      	movs	r2, #128	@ 0x80
 80054c0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a11      	ldr	r2, [pc, #68]	@ (800550c <USB_HostInit+0x17c>)
 80054c6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a11      	ldr	r2, [pc, #68]	@ (8005510 <USB_HostInit+0x180>)
 80054cc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f043 0210 	orr.w	r2, r3, #16
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005514 <USB_HostInit+0x184>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054fc:	b004      	add	sp, #16
 80054fe:	4770      	bx	lr
 8005500:	40040000 	.word	0x40040000
 8005504:	01000200 	.word	0x01000200
 8005508:	00e00300 	.word	0x00e00300
 800550c:	00600080 	.word	0x00600080
 8005510:	004000e0 	.word	0x004000e0
 8005514:	a3200008 	.word	0xa3200008

08005518 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	68f9      	ldr	r1, [r7, #12]
 800554c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005550:	4313      	orrs	r3, r2
 8005552:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d107      	bne.n	800556a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005560:	461a      	mov	r2, r3
 8005562:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005566:	6053      	str	r3, [r2, #4]
 8005568:	e00c      	b.n	8005584 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	2b02      	cmp	r3, #2
 800556e:	d107      	bne.n	8005580 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005576:	461a      	mov	r2, r3
 8005578:	f241 7370 	movw	r3, #6000	@ 0x1770
 800557c:	6053      	str	r3, [r2, #4]
 800557e:	e001      	b.n	8005584 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80055b2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055c0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80055c2:	2064      	movs	r0, #100	@ 0x64
 80055c4:	f7fb fc3c 	bl	8000e40 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055d4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80055d6:	200a      	movs	r0, #10
 80055d8:	f7fb fc32 	bl	8000e40 <HAL_Delay>

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b085      	sub	sp, #20
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	460b      	mov	r3, r1
 80055f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800560a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <USB_DriveVbus+0x44>
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d106      	bne.n	800562a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005624:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005628:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005634:	d109      	bne.n	800564a <USB_DriveVbus+0x64>
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d106      	bne.n	800564a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005644:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005648:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	0c5b      	lsrs	r3, r3, #17
 8005676:	f003 0303 	and.w	r3, r3, #3
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	b29b      	uxth	r3, r3
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	4608      	mov	r0, r1
 80056b2:	4611      	mov	r1, r2
 80056b4:	461a      	mov	r2, r3
 80056b6:	4603      	mov	r3, r0
 80056b8:	70fb      	strb	r3, [r7, #3]
 80056ba:	460b      	mov	r3, r1
 80056bc:	70bb      	strb	r3, [r7, #2]
 80056be:	4613      	mov	r3, r2
 80056c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056d6:	461a      	mov	r2, r3
 80056d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80056de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d87c      	bhi.n	80057e0 <USB_HC_Init+0x138>
 80056e6:	a201      	add	r2, pc, #4	@ (adr r2, 80056ec <USB_HC_Init+0x44>)
 80056e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ec:	080056fd 	.word	0x080056fd
 80056f0:	080057a3 	.word	0x080057a3
 80056f4:	080056fd 	.word	0x080056fd
 80056f8:	08005765 	.word	0x08005765
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	4413      	add	r3, r2
 8005704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005708:	461a      	mov	r2, r3
 800570a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800570e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005710:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005714:	2b00      	cmp	r3, #0
 8005716:	da10      	bge.n	800573a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4413      	add	r3, r2
 8005720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	78fa      	ldrb	r2, [r7, #3]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	440a      	add	r2, r1
 800572e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005736:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005738:	e055      	b.n	80057e6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a6f      	ldr	r2, [pc, #444]	@ (80058fc <USB_HC_Init+0x254>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d151      	bne.n	80057e6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4413      	add	r3, r2
 800574a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	78fa      	ldrb	r2, [r7, #3]
 8005752:	0151      	lsls	r1, r2, #5
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	440a      	add	r2, r1
 8005758:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800575c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005760:	60d3      	str	r3, [r2, #12]
      break;
 8005762:	e040      	b.n	80057e6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005770:	461a      	mov	r2, r3
 8005772:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005776:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005778:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800577c:	2b00      	cmp	r3, #0
 800577e:	da34      	bge.n	80057ea <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4413      	add	r3, r2
 8005788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	440a      	add	r2, r1
 8005796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800579a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800579e:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057a0:	e023      	b.n	80057ea <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ae:	461a      	mov	r2, r3
 80057b0:	f240 2325 	movw	r3, #549	@ 0x225
 80057b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	da17      	bge.n	80057ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	78fa      	ldrb	r2, [r7, #3]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057d8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80057dc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80057de:	e006      	b.n	80057ee <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	77fb      	strb	r3, [r7, #31]
      break;
 80057e4:	e004      	b.n	80057f0 <USB_HC_Init+0x148>
      break;
 80057e6:	bf00      	nop
 80057e8:	e002      	b.n	80057f0 <USB_HC_Init+0x148>
      break;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <USB_HC_Init+0x148>
      break;
 80057ee:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80057f0:	78fb      	ldrb	r3, [r7, #3]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057fc:	461a      	mov	r2, r3
 80057fe:	2300      	movs	r3, #0
 8005800:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	4413      	add	r3, r2
 800580a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	440a      	add	r2, r1
 8005818:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800581c:	f043 0302 	orr.w	r3, r3, #2
 8005820:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	2101      	movs	r1, #1
 8005832:	fa01 f303 	lsl.w	r3, r1, r3
 8005836:	6939      	ldr	r1, [r7, #16]
 8005838:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800583c:	4313      	orrs	r3, r2
 800583e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800584c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005850:	2b00      	cmp	r3, #0
 8005852:	da03      	bge.n	800585c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005854:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	e001      	b.n	8005860 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff fef9 	bl	8005658 <USB_GetHostSpeed>
 8005866:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005868:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800586c:	2b02      	cmp	r3, #2
 800586e:	d106      	bne.n	800587e <USB_HC_Init+0x1d6>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d003      	beq.n	800587e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005876:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	e001      	b.n	8005882 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005882:	787b      	ldrb	r3, [r7, #1]
 8005884:	059b      	lsls	r3, r3, #22
 8005886:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800588a:	78bb      	ldrb	r3, [r7, #2]
 800588c:	02db      	lsls	r3, r3, #11
 800588e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005892:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005894:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005898:	049b      	lsls	r3, r3, #18
 800589a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800589e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80058a0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80058a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058a6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058b0:	78fa      	ldrb	r2, [r7, #3]
 80058b2:	0151      	lsls	r1, r2, #5
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	440a      	add	r2, r1
 80058b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80058bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058c0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80058c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d003      	beq.n	80058d2 <USB_HC_Init+0x22a>
 80058ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d10f      	bne.n	80058f2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	78fa      	ldrb	r2, [r7, #3]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058f0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80058f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40040000 	.word	0x40040000

08005900 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08c      	sub	sp, #48	@ 0x30
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	4613      	mov	r3, r2
 800590c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	785b      	ldrb	r3, [r3, #1]
 8005916:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005918:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800591c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4a5d      	ldr	r2, [pc, #372]	@ (8005a98 <USB_HC_StartXfer+0x198>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d12f      	bne.n	8005986 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d11c      	bne.n	8005966 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	7c9b      	ldrb	r3, [r3, #18]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <USB_HC_StartXfer+0x3c>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	7c9b      	ldrb	r3, [r3, #18]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d124      	bne.n	8005986 <USB_HC_StartXfer+0x86>
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	799b      	ldrb	r3, [r3, #6]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d120      	bne.n	8005986 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	4413      	add	r3, r2
 800594c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	0151      	lsls	r1, r2, #5
 8005956:	6a3a      	ldr	r2, [r7, #32]
 8005958:	440a      	add	r2, r1
 800595a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800595e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005962:	60d3      	str	r3, [r2, #12]
 8005964:	e00f      	b.n	8005986 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	791b      	ldrb	r3, [r3, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <USB_HC_StartXfer+0x86>
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	795b      	ldrb	r3, [r3, #5]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d107      	bne.n	8005986 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	785b      	ldrb	r3, [r3, #1]
 800597a:	4619      	mov	r1, r3
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 fb6b 	bl	8006058 <USB_DoPing>
        return HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	e232      	b.n	8005dec <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	799b      	ldrb	r3, [r3, #6]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d158      	bne.n	8005a40 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800598e:	2301      	movs	r3, #1
 8005990:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	78db      	ldrb	r3, [r3, #3]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800599a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	8a92      	ldrh	r2, [r2, #20]
 80059a0:	fb03 f202 	mul.w	r2, r3, r2
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	61da      	str	r2, [r3, #28]
 80059a8:	e07c      	b.n	8005aa4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	7c9b      	ldrb	r3, [r3, #18]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d130      	bne.n	8005a14 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	2bbc      	cmp	r3, #188	@ 0xbc
 80059b8:	d918      	bls.n	80059ec <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	8a9b      	ldrh	r3, [r3, #20]
 80059be:	461a      	mov	r2, r3
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d003      	beq.n	80059dc <USB_HC_StartXfer+0xdc>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d103      	bne.n	80059e4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2202      	movs	r2, #2
 80059e0:	60da      	str	r2, [r3, #12]
 80059e2:	e05f      	b.n	8005aa4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2201      	movs	r2, #1
 80059e8:	60da      	str	r2, [r3, #12]
 80059ea:	e05b      	b.n	8005aa4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d007      	beq.n	8005a0c <USB_HC_StartXfer+0x10c>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d003      	beq.n	8005a0c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2204      	movs	r2, #4
 8005a08:	60da      	str	r2, [r3, #12]
 8005a0a:	e04b      	b.n	8005aa4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2203      	movs	r2, #3
 8005a10:	60da      	str	r2, [r3, #12]
 8005a12:	e047      	b.n	8005aa4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d10d      	bne.n	8005a36 <USB_HC_StartXfer+0x136>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	8a92      	ldrh	r2, [r2, #20]
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d907      	bls.n	8005a36 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	8a92      	ldrh	r2, [r2, #20]
 8005a2c:	fb03 f202 	mul.w	r2, r3, r2
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	61da      	str	r2, [r3, #28]
 8005a34:	e036      	b.n	8005aa4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	6a1a      	ldr	r2, [r3, #32]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	61da      	str	r2, [r3, #28]
 8005a3e:	e031      	b.n	8005aa4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d018      	beq.n	8005a7a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	8a92      	ldrh	r2, [r2, #20]
 8005a50:	4413      	add	r3, r2
 8005a52:	3b01      	subs	r3, #1
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	8a92      	ldrh	r2, [r2, #20]
 8005a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a5c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005a5e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005a60:	8b7b      	ldrh	r3, [r7, #26]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d90b      	bls.n	8005a7e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005a66:	8b7b      	ldrh	r3, [r7, #26]
 8005a68:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	8a92      	ldrh	r2, [r2, #20]
 8005a70:	fb03 f202 	mul.w	r2, r3, r2
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	61da      	str	r2, [r3, #28]
 8005a78:	e001      	b.n	8005a7e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	78db      	ldrb	r3, [r3, #3]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	8a92      	ldrh	r2, [r2, #20]
 8005a8c:	fb03 f202 	mul.w	r2, r3, r2
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	61da      	str	r2, [r3, #28]
 8005a94:	e006      	b.n	8005aa4 <USB_HC_StartXfer+0x1a4>
 8005a96:	bf00      	nop
 8005a98:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	6a1a      	ldr	r2, [r3, #32]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005aac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005aae:	04d9      	lsls	r1, r3, #19
 8005ab0:	4ba3      	ldr	r3, [pc, #652]	@ (8005d40 <USB_HC_StartXfer+0x440>)
 8005ab2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ab4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	7d9b      	ldrb	r3, [r3, #22]
 8005aba:	075b      	lsls	r3, r3, #29
 8005abc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ac0:	69f9      	ldr	r1, [r7, #28]
 8005ac2:	0148      	lsls	r0, r1, #5
 8005ac4:	6a39      	ldr	r1, [r7, #32]
 8005ac6:	4401      	add	r1, r0
 8005ac8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005acc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ace:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6999      	ldr	r1, [r3, #24]
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae6:	460a      	mov	r2, r1
 8005ae8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bf0c      	ite	eq
 8005afa:	2301      	moveq	r3, #1
 8005afc:	2300      	movne	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	0151      	lsls	r1, r2, #5
 8005b14:	6a3a      	ldr	r2, [r7, #32]
 8005b16:	440a      	add	r2, r1
 8005b18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b20:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	7e7b      	ldrb	r3, [r7, #25]
 8005b32:	075b      	lsls	r3, r3, #29
 8005b34:	69f9      	ldr	r1, [r7, #28]
 8005b36:	0148      	lsls	r0, r1, #5
 8005b38:	6a39      	ldr	r1, [r7, #32]
 8005b3a:	4401      	add	r1, r0
 8005b3c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005b40:	4313      	orrs	r3, r2
 8005b42:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	799b      	ldrb	r3, [r3, #6]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	f040 80c3 	bne.w	8005cd4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	7c5b      	ldrb	r3, [r3, #17]
 8005b52:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	6a3a      	ldr	r2, [r7, #32]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b6a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	0151      	lsls	r1, r2, #5
 8005b7e:	6a3a      	ldr	r2, [r7, #32]
 8005b80:	440a      	add	r2, r1
 8005b82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b86:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	79db      	ldrb	r3, [r3, #7]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d123      	bne.n	8005bdc <USB_HC_StartXfer+0x2dc>
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	78db      	ldrb	r3, [r3, #3]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d11f      	bne.n	8005bdc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	6a3a      	ldr	r2, [r7, #32]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bba:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bda:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	7c9b      	ldrb	r3, [r3, #18]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d003      	beq.n	8005bec <USB_HC_StartXfer+0x2ec>
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	7c9b      	ldrb	r3, [r3, #18]
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d117      	bne.n	8005c1c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d113      	bne.n	8005c1c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	78db      	ldrb	r3, [r3, #3]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d10f      	bne.n	8005c1c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	6a3a      	ldr	r2, [r7, #32]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c1a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	7c9b      	ldrb	r3, [r3, #18]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d162      	bne.n	8005cea <USB_HC_StartXfer+0x3ea>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	78db      	ldrb	r3, [r3, #3]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d15e      	bne.n	8005cea <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d858      	bhi.n	8005ce8 <USB_HC_StartXfer+0x3e8>
 8005c36:	a201      	add	r2, pc, #4	@ (adr r2, 8005c3c <USB_HC_StartXfer+0x33c>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c4d 	.word	0x08005c4d
 8005c40:	08005c6f 	.word	0x08005c6f
 8005c44:	08005c91 	.word	0x08005c91
 8005c48:	08005cb3 	.word	0x08005cb3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	6a3a      	ldr	r2, [r7, #32]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c6a:	6053      	str	r3, [r2, #4]
          break;
 8005c6c:	e03d      	b.n	8005cea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	6a3a      	ldr	r2, [r7, #32]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c88:	f043 030e 	orr.w	r3, r3, #14
 8005c8c:	6053      	str	r3, [r2, #4]
          break;
 8005c8e:	e02c      	b.n	8005cea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	6a3a      	ldr	r2, [r7, #32]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005caa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cae:	6053      	str	r3, [r2, #4]
          break;
 8005cb0:	e01b      	b.n	8005cea <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cd0:	6053      	str	r3, [r2, #4]
          break;
 8005cd2:	e00a      	b.n	8005cea <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	6053      	str	r3, [r2, #4]
 8005ce6:	e000      	b.n	8005cea <USB_HC_StartXfer+0x3ea>
          break;
 8005ce8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d00:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	78db      	ldrb	r3, [r3, #3]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d004      	beq.n	8005d14 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	e003      	b.n	8005d1c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d1a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d22:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d30:	461a      	mov	r2, r3
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e055      	b.n	8005dec <USB_HC_StartXfer+0x4ec>
 8005d40:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	78db      	ldrb	r3, [r3, #3]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d14e      	bne.n	8005dea <USB_HC_StartXfer+0x4ea>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d04a      	beq.n	8005dea <USB_HC_StartXfer+0x4ea>
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	79db      	ldrb	r3, [r3, #7]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d146      	bne.n	8005dea <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	7c9b      	ldrb	r3, [r3, #18]
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d831      	bhi.n	8005dc8 <USB_HC_StartXfer+0x4c8>
 8005d64:	a201      	add	r2, pc, #4	@ (adr r2, 8005d6c <USB_HC_StartXfer+0x46c>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005da1 	.word	0x08005da1
 8005d74:	08005d7d 	.word	0x08005d7d
 8005d78:	08005da1 	.word	0x08005da1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	3303      	adds	r3, #3
 8005d82:	089b      	lsrs	r3, r3, #2
 8005d84:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005d86:	8afa      	ldrh	r2, [r7, #22]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d91c      	bls.n	8005dcc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	f043 0220 	orr.w	r2, r3, #32
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d9e:	e015      	b.n	8005dcc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	3303      	adds	r3, #3
 8005da6:	089b      	lsrs	r3, r3, #2
 8005da8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005daa:	8afa      	ldrh	r2, [r7, #22]
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d90a      	bls.n	8005dd0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005dc6:	e003      	b.n	8005dd0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005dc8:	bf00      	nop
 8005dca:	e002      	b.n	8005dd2 <USB_HC_StartXfer+0x4d2>
        break;
 8005dcc:	bf00      	nop
 8005dce:	e000      	b.n	8005dd2 <USB_HC_StartXfer+0x4d2>
        break;
 8005dd0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	6999      	ldr	r1, [r3, #24]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	785a      	ldrb	r2, [r3, #1]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	2000      	movs	r0, #0
 8005de2:	9000      	str	r0, [sp, #0]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff f9ca 	bl	800517e <USB_WritePacket>
  }

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3728      	adds	r7, #40	@ 0x28
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	b29b      	uxth	r3, r3
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b089      	sub	sp, #36	@ 0x24
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	0c9b      	lsrs	r3, r3, #18
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	0fdb      	lsrs	r3, r3, #31
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	0fdb      	lsrs	r3, r3, #31
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d10d      	bne.n	8005e98 <USB_HC_Halt+0x82>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10a      	bne.n	8005e98 <USB_HC_Halt+0x82>
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d002      	beq.n	8005e94 <USB_HC_Halt+0x7e>
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d101      	bne.n	8005e98 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	e0d8      	b.n	800604a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <USB_HC_Halt+0x8e>
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d173      	bne.n	8005f8c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ebe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ec2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d14a      	bne.n	8005f66 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d133      	bne.n	8005f44 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ef6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005efa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	0151      	lsls	r1, r2, #5
 8005f0e:	69fa      	ldr	r2, [r7, #28]
 8005f10:	440a      	add	r2, r1
 8005f12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f1a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f28:	d82e      	bhi.n	8005f88 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f40:	d0ec      	beq.n	8005f1c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f42:	e081      	b.n	8006048 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f62:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f64:	e070      	b.n	8006048 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f84:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f86:	e05f      	b.n	8006048 <USB_HC_Halt+0x232>
            break;
 8005f88:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f8a:	e05d      	b.n	8006048 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fa6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005faa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d133      	bne.n	8006024 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ff6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ffa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	3301      	adds	r3, #1
 8006000:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006008:	d81d      	bhi.n	8006046 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	4413      	add	r3, r2
 8006012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800601c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006020:	d0ec      	beq.n	8005ffc <USB_HC_Halt+0x1e6>
 8006022:	e011      	b.n	8006048 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	4413      	add	r3, r2
 800602c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	0151      	lsls	r1, r2, #5
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	440a      	add	r2, r1
 800603a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800603e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	e000      	b.n	8006048 <USB_HC_Halt+0x232>
          break;
 8006046:	bf00      	nop
    }
  }

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3724      	adds	r7, #36	@ 0x24
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
	...

08006058 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800606c:	2301      	movs	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	04da      	lsls	r2, r3, #19
 8006074:	4b15      	ldr	r3, [pc, #84]	@ (80060cc <USB_DoPing+0x74>)
 8006076:	4013      	ands	r3, r2
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	440a      	add	r2, r1
 8006080:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006084:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006088:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	4413      	add	r3, r2
 8006092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b6:	461a      	mov	r2, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	1ff80000 	.word	0x1ff80000

080060d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b088      	sub	sp, #32
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7fe ff8d 	bl	8005004 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060ea:	2110      	movs	r1, #16
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7fe ffe6 	bl	80050be <USB_FlushTxFifo>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7ff f810 	bl	8005122 <USB_FlushRxFifo>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800610c:	2300      	movs	r3, #0
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	e01f      	b.n	8006152 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	4413      	add	r3, r2
 800611a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006128:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006130:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006138:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	4413      	add	r3, r2
 8006142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006146:	461a      	mov	r2, r3
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	3301      	adds	r3, #1
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	2b0f      	cmp	r3, #15
 8006156:	d9dc      	bls.n	8006112 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006158:	2300      	movs	r3, #0
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	e034      	b.n	80061c8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	4413      	add	r3, r2
 8006166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006174:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800617c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006184:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	4413      	add	r3, r2
 800618e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006192:	461a      	mov	r2, r3
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3301      	adds	r3, #1
 800619c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061a4:	d80c      	bhi.n	80061c0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061bc:	d0ec      	beq.n	8006198 <USB_StopHost+0xc8>
 80061be:	e000      	b.n	80061c2 <USB_StopHost+0xf2>
        break;
 80061c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	3301      	adds	r3, #1
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b0f      	cmp	r3, #15
 80061cc:	d9c7      	bls.n	800615e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061d4:	461a      	mov	r2, r3
 80061d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fe fefc 	bl	8004fe2 <USB_EnableGlobalInt>

  return ret;
 80061ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80061f4:	b590      	push	{r4, r7, lr}
 80061f6:	b089      	sub	sp, #36	@ 0x24
 80061f8:	af04      	add	r7, sp, #16
 80061fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80061fc:	2301      	movs	r3, #1
 80061fe:	2202      	movs	r2, #2
 8006200:	2102      	movs	r1, #2
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fc85 	bl	8006b12 <USBH_FindInterface>
 8006208:	4603      	mov	r3, r0
 800620a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	2bff      	cmp	r3, #255	@ 0xff
 8006210:	d002      	beq.n	8006218 <USBH_CDC_InterfaceInit+0x24>
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d901      	bls.n	800621c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006218:	2302      	movs	r3, #2
 800621a:	e13d      	b.n	8006498 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fc5a 	bl	8006ada <USBH_SelectInterface>
 8006226:	4603      	mov	r3, r0
 8006228:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800622a:	7bbb      	ldrb	r3, [r7, #14]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006230:	2302      	movs	r3, #2
 8006232:	e131      	b.n	8006498 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800623a:	2050      	movs	r0, #80	@ 0x50
 800623c:	f002 fb64 	bl	8008908 <malloc>
 8006240:	4603      	mov	r3, r0
 8006242:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006254:	2302      	movs	r3, #2
 8006256:	e11f      	b.n	8006498 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006258:	2250      	movs	r2, #80	@ 0x50
 800625a:	2100      	movs	r1, #0
 800625c:	68b8      	ldr	r0, [r7, #8]
 800625e:	f002 fc11 	bl	8008a84 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006262:	7bfb      	ldrb	r3, [r7, #15]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	211a      	movs	r1, #26
 8006268:	fb01 f303 	mul.w	r3, r1, r3
 800626c:	4413      	add	r3, r2
 800626e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	b25b      	sxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	da15      	bge.n	80062a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	211a      	movs	r1, #26
 8006280:	fb01 f303 	mul.w	r3, r1, r3
 8006284:	4413      	add	r3, r2
 8006286:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800628a:	781a      	ldrb	r2, [r3, #0]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	211a      	movs	r1, #26
 8006296:	fb01 f303 	mul.w	r3, r1, r3
 800629a:	4413      	add	r3, r2
 800629c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062a0:	881a      	ldrh	r2, [r3, #0]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	785b      	ldrb	r3, [r3, #1]
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 ffbe 	bl	800822e <USBH_AllocPipe>
 80062b2:	4603      	mov	r3, r0
 80062b4:	461a      	mov	r2, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	7819      	ldrb	r1, [r3, #0]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	7858      	ldrb	r0, [r3, #1]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	8952      	ldrh	r2, [r2, #10]
 80062d2:	9202      	str	r2, [sp, #8]
 80062d4:	2203      	movs	r2, #3
 80062d6:	9201      	str	r2, [sp, #4]
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	4623      	mov	r3, r4
 80062dc:	4602      	mov	r2, r0
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 ff76 	bl	80081d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2200      	movs	r2, #0
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f002 fa85 	bl	80087fc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80062f2:	2300      	movs	r3, #0
 80062f4:	2200      	movs	r2, #0
 80062f6:	210a      	movs	r1, #10
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fc0a 	bl	8006b12 <USBH_FindInterface>
 80062fe:	4603      	mov	r3, r0
 8006300:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	2bff      	cmp	r3, #255	@ 0xff
 8006306:	d002      	beq.n	800630e <USBH_CDC_InterfaceInit+0x11a>
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d901      	bls.n	8006312 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800630e:	2302      	movs	r3, #2
 8006310:	e0c2      	b.n	8006498 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	211a      	movs	r1, #26
 8006318:	fb01 f303 	mul.w	r3, r1, r3
 800631c:	4413      	add	r3, r2
 800631e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	b25b      	sxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	da16      	bge.n	8006358 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	211a      	movs	r1, #26
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	4413      	add	r3, r2
 8006336:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800633a:	781a      	ldrb	r2, [r3, #0]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	211a      	movs	r1, #26
 8006346:	fb01 f303 	mul.w	r3, r1, r3
 800634a:	4413      	add	r3, r2
 800634c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006350:	881a      	ldrh	r2, [r3, #0]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	835a      	strh	r2, [r3, #26]
 8006356:	e015      	b.n	8006384 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	211a      	movs	r1, #26
 800635e:	fb01 f303 	mul.w	r3, r1, r3
 8006362:	4413      	add	r3, r2
 8006364:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006368:	781a      	ldrb	r2, [r3, #0]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	211a      	movs	r1, #26
 8006374:	fb01 f303 	mul.w	r3, r1, r3
 8006378:	4413      	add	r3, r2
 800637a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800637e:	881a      	ldrh	r2, [r3, #0]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	211a      	movs	r1, #26
 800638a:	fb01 f303 	mul.w	r3, r1, r3
 800638e:	4413      	add	r3, r2
 8006390:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	b25b      	sxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	da16      	bge.n	80063ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	211a      	movs	r1, #26
 80063a2:	fb01 f303 	mul.w	r3, r1, r3
 80063a6:	4413      	add	r3, r2
 80063a8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80063ac:	781a      	ldrb	r2, [r3, #0]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	211a      	movs	r1, #26
 80063b8:	fb01 f303 	mul.w	r3, r1, r3
 80063bc:	4413      	add	r3, r2
 80063be:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80063c2:	881a      	ldrh	r2, [r3, #0]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	835a      	strh	r2, [r3, #26]
 80063c8:	e015      	b.n	80063f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	211a      	movs	r1, #26
 80063d0:	fb01 f303 	mul.w	r3, r1, r3
 80063d4:	4413      	add	r3, r2
 80063d6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80063da:	781a      	ldrb	r2, [r3, #0]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	211a      	movs	r1, #26
 80063e6:	fb01 f303 	mul.w	r3, r1, r3
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80063f0:	881a      	ldrh	r2, [r3, #0]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	7b9b      	ldrb	r3, [r3, #14]
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 ff16 	bl	800822e <USBH_AllocPipe>
 8006402:	4603      	mov	r3, r0
 8006404:	461a      	mov	r2, r3
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	7bdb      	ldrb	r3, [r3, #15]
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f001 ff0c 	bl	800822e <USBH_AllocPipe>
 8006416:	4603      	mov	r3, r0
 8006418:	461a      	mov	r2, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	7b59      	ldrb	r1, [r3, #13]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	7b98      	ldrb	r0, [r3, #14]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	8b12      	ldrh	r2, [r2, #24]
 8006436:	9202      	str	r2, [sp, #8]
 8006438:	2202      	movs	r2, #2
 800643a:	9201      	str	r2, [sp, #4]
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	4623      	mov	r3, r4
 8006440:	4602      	mov	r2, r0
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 fec4 	bl	80081d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	7b19      	ldrb	r1, [r3, #12]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	7bd8      	ldrb	r0, [r3, #15]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	8b52      	ldrh	r2, [r2, #26]
 8006460:	9202      	str	r2, [sp, #8]
 8006462:	2202      	movs	r2, #2
 8006464:	9201      	str	r2, [sp, #4]
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	4623      	mov	r3, r4
 800646a:	4602      	mov	r2, r0
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 feaf 	bl	80081d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	7b5b      	ldrb	r3, [r3, #13]
 800647e:	2200      	movs	r2, #0
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f002 f9ba 	bl	80087fc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	7b1b      	ldrb	r3, [r3, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f002 f9b3 	bl	80087fc <USBH_LL_SetToggle>

  return USBH_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	bd90      	pop	{r4, r7, pc}

080064a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00e      	beq.n	80064d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 fea4 	bl	800820e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	4619      	mov	r1, r3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 fecf 	bl	8008270 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	7b1b      	ldrb	r3, [r3, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00e      	beq.n	80064fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	7b1b      	ldrb	r3, [r3, #12]
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 fe91 	bl	800820e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	7b1b      	ldrb	r3, [r3, #12]
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 febc 	bl	8008270 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	7b5b      	ldrb	r3, [r3, #13]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00e      	beq.n	8006524 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	7b5b      	ldrb	r3, [r3, #13]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 fe7e 	bl	800820e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	7b5b      	ldrb	r3, [r3, #13]
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f001 fea9 	bl	8008270 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00b      	beq.n	8006548 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	4618      	mov	r0, r3
 800653a:	f002 f9ed 	bl	8008918 <free>
    phost->pActiveClass->pData = 0U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006544:	2200      	movs	r2, #0
 8006546:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3340      	adds	r3, #64	@ 0x40
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f8b1 	bl	80066d2 <GetLineCoding>
 8006570:	4603      	mov	r3, r0
 8006572:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006574:	7afb      	ldrb	r3, [r7, #11]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d105      	bne.n	8006586 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006580:	2102      	movs	r1, #2
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006586:	7afb      	ldrb	r3, [r7, #11]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006598:	2301      	movs	r3, #1
 800659a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d877      	bhi.n	80066a4 <USBH_CDC_Process+0x114>
 80065b4:	a201      	add	r2, pc, #4	@ (adr r2, 80065bc <USBH_CDC_Process+0x2c>)
 80065b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ba:	bf00      	nop
 80065bc:	080065d1 	.word	0x080065d1
 80065c0:	080065d7 	.word	0x080065d7
 80065c4:	08006607 	.word	0x08006607
 80065c8:	0800667b 	.word	0x0800667b
 80065cc:	08006689 	.word	0x08006689
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	73fb      	strb	r3, [r7, #15]
      break;
 80065d4:	e06d      	b.n	80066b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f897 	bl	8006710 <SetLineCoding>
 80065e2:	4603      	mov	r3, r0
 80065e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d104      	bne.n	80065f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80065f4:	e058      	b.n	80066a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80065f6:	7bbb      	ldrb	r3, [r7, #14]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d055      	beq.n	80066a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	2204      	movs	r2, #4
 8006600:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006604:	e050      	b.n	80066a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	3340      	adds	r3, #64	@ 0x40
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f860 	bl	80066d2 <GetLineCoding>
 8006612:	4603      	mov	r3, r0
 8006614:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d126      	bne.n	800666a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800662e:	791b      	ldrb	r3, [r3, #4]
 8006630:	429a      	cmp	r2, r3
 8006632:	d13b      	bne.n	80066ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800663e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006640:	429a      	cmp	r2, r3
 8006642:	d133      	bne.n	80066ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800664e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006650:	429a      	cmp	r2, r3
 8006652:	d12b      	bne.n	80066ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800665c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800665e:	429a      	cmp	r2, r3
 8006660:	d124      	bne.n	80066ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f958 	bl	8006918 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006668:	e020      	b.n	80066ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d01d      	beq.n	80066ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2204      	movs	r2, #4
 8006674:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006678:	e018      	b.n	80066ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f867 	bl	800674e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f8da 	bl	800683a <CDC_ProcessReception>
      break;
 8006686:	e014      	b.n	80066b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006688:	2100      	movs	r1, #0
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 f81a 	bl	80076c4 <USBH_ClrFeature>
 8006690:	4603      	mov	r3, r0
 8006692:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80066a2:	e005      	b.n	80066b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80066a4:	bf00      	nop
 80066a6:	e004      	b.n	80066b2 <USBH_CDC_Process+0x122>
      break;
 80066a8:	bf00      	nop
 80066aa:	e002      	b.n	80066b2 <USBH_CDC_Process+0x122>
      break;
 80066ac:	bf00      	nop
 80066ae:	e000      	b.n	80066b2 <USBH_CDC_Process+0x122>
      break;
 80066b0:	bf00      	nop

  }

  return status;
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b082      	sub	sp, #8
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	22a1      	movs	r2, #161	@ 0xa1
 80066e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2221      	movs	r2, #33	@ 0x21
 80066e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2207      	movs	r2, #7
 80066f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2207      	movs	r2, #7
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fb14 	bl	8007d2e <USBH_CtlReq>
 8006706:	4603      	mov	r3, r0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2221      	movs	r2, #33	@ 0x21
 800671e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2207      	movs	r2, #7
 8006736:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2207      	movs	r2, #7
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 faf5 	bl	8007d2e <USBH_CtlReq>
 8006744:	4603      	mov	r3, r0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b086      	sub	sp, #24
 8006752:	af02      	add	r7, sp, #8
 8006754:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006760:	2300      	movs	r3, #0
 8006762:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800676a:	2b01      	cmp	r3, #1
 800676c:	d002      	beq.n	8006774 <CDC_ProcessTransmission+0x26>
 800676e:	2b02      	cmp	r3, #2
 8006770:	d023      	beq.n	80067ba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006772:	e05e      	b.n	8006832 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	8b12      	ldrh	r2, [r2, #24]
 800677c:	4293      	cmp	r3, r2
 800677e:	d90b      	bls.n	8006798 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	69d9      	ldr	r1, [r3, #28]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8b1a      	ldrh	r2, [r3, #24]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	7b5b      	ldrb	r3, [r3, #13]
 800678c:	2001      	movs	r0, #1
 800678e:	9000      	str	r0, [sp, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 fcda 	bl	800814a <USBH_BulkSendData>
 8006796:	e00b      	b.n	80067b0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	7b5b      	ldrb	r3, [r3, #13]
 80067a6:	2001      	movs	r0, #1
 80067a8:	9000      	str	r0, [sp, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 fccd 	bl	800814a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80067b8:	e03b      	b.n	8006832 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	7b5b      	ldrb	r3, [r3, #13]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 fff1 	bl	80087a8 <USBH_LL_GetURBState>
 80067c6:	4603      	mov	r3, r0
 80067c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80067ca:	7afb      	ldrb	r3, [r7, #11]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d128      	bne.n	8006822 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	8b12      	ldrh	r2, [r2, #24]
 80067d8:	4293      	cmp	r3, r2
 80067da:	d90e      	bls.n	80067fa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	8b12      	ldrh	r2, [r2, #24]
 80067e4:	1a9a      	subs	r2, r3, r2
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	8b12      	ldrh	r2, [r2, #24]
 80067f2:	441a      	add	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	61da      	str	r2, [r3, #28]
 80067f8:	e002      	b.n	8006800 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	d004      	beq.n	8006812 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006810:	e00e      	b.n	8006830 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f868 	bl	80068f0 <USBH_CDC_TransmitCallback>
      break;
 8006820:	e006      	b.n	8006830 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006822:	7afb      	ldrb	r3, [r7, #11]
 8006824:	2b02      	cmp	r3, #2
 8006826:	d103      	bne.n	8006830 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006830:	bf00      	nop
  }
}
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b086      	sub	sp, #24
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800684c:	2300      	movs	r3, #0
 800684e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006856:	2b03      	cmp	r3, #3
 8006858:	d002      	beq.n	8006860 <CDC_ProcessReception+0x26>
 800685a:	2b04      	cmp	r3, #4
 800685c:	d00e      	beq.n	800687c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800685e:	e043      	b.n	80068e8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	6a19      	ldr	r1, [r3, #32]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	8b5a      	ldrh	r2, [r3, #26]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	7b1b      	ldrb	r3, [r3, #12]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f001 fc91 	bl	8008194 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2204      	movs	r2, #4
 8006876:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800687a:	e035      	b.n	80068e8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	7b1b      	ldrb	r3, [r3, #12]
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 ff90 	bl	80087a8 <USBH_LL_GetURBState>
 8006888:	4603      	mov	r3, r0
 800688a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800688c:	7cfb      	ldrb	r3, [r7, #19]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d129      	bne.n	80068e6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	7b1b      	ldrb	r3, [r3, #12]
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fef3 	bl	8008684 <USBH_LL_GetLastXferSize>
 800689e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d016      	beq.n	80068d8 <CDC_ProcessReception+0x9e>
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	8b5b      	ldrh	r3, [r3, #26]
 80068ae:	461a      	mov	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d110      	bne.n	80068d8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	1ad2      	subs	r2, r2, r3
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	6a1a      	ldr	r2, [r3, #32]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	441a      	add	r2, r3
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2203      	movs	r2, #3
 80068d2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80068d6:	e006      	b.n	80068e6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f80f 	bl	8006904 <USBH_CDC_ReceiveCallback>
      break;
 80068e6:	bf00      	nop
  }
}
 80068e8:	bf00      	nop
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4613      	mov	r3, r2
 8006938:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006940:	2302      	movs	r3, #2
 8006942:	e029      	b.n	8006998 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	79fa      	ldrb	r2, [r7, #7]
 8006948:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f81f 	bl	80069a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f001 fdc3 	bl	800851c <USBH_LL_Init>

  return USBH_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	e009      	b.n	80069c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	33e0      	adds	r3, #224	@ 0xe0
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	2200      	movs	r2, #0
 80069be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3301      	adds	r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b0f      	cmp	r3, #15
 80069ca:	d9f2      	bls.n	80069b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	e009      	b.n	80069e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80069dc:	2200      	movs	r2, #0
 80069de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ec:	d3f1      	bcc.n	80069d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2240      	movs	r2, #64	@ 0x40
 8006a12:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	331c      	adds	r3, #28
 8006a3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a42:	2100      	movs	r1, #0
 8006a44:	4618      	mov	r0, r3
 8006a46:	f002 f81d 	bl	8008a84 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006a50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a54:	2100      	movs	r1, #0
 8006a56:	4618      	mov	r0, r3
 8006a58:	f002 f814 	bl	8008a84 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006a62:	2212      	movs	r2, #18
 8006a64:	2100      	movs	r1, #0
 8006a66:	4618      	mov	r0, r3
 8006a68:	f002 f80c 	bl	8008a84 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006a72:	223e      	movs	r2, #62	@ 0x3e
 8006a74:	2100      	movs	r1, #0
 8006a76:	4618      	mov	r0, r3
 8006a78:	f002 f804 	bl	8008a84 <memset>

  return USBH_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d016      	beq.n	8006ac8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10e      	bne.n	8006ac2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006aaa:	1c59      	adds	r1, r3, #1
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	33de      	adds	r3, #222	@ 0xde
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]
 8006ac0:	e004      	b.n	8006acc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	73fb      	strb	r3, [r7, #15]
 8006ac6:	e001      	b.n	8006acc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b085      	sub	sp, #20
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006af0:	78fa      	ldrb	r2, [r7, #3]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d204      	bcs.n	8006b00 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	78fa      	ldrb	r2, [r7, #3]
 8006afa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006afe:	e001      	b.n	8006b04 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b00:	2302      	movs	r3, #2
 8006b02:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b087      	sub	sp, #28
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	4608      	mov	r0, r1
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	461a      	mov	r2, r3
 8006b20:	4603      	mov	r3, r0
 8006b22:	70fb      	strb	r3, [r7, #3]
 8006b24:	460b      	mov	r3, r1
 8006b26:	70bb      	strb	r3, [r7, #2]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006b3a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b3c:	e025      	b.n	8006b8a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b3e:	7dfb      	ldrb	r3, [r7, #23]
 8006b40:	221a      	movs	r2, #26
 8006b42:	fb02 f303 	mul.w	r3, r2, r3
 8006b46:	3308      	adds	r3, #8
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	795b      	ldrb	r3, [r3, #5]
 8006b54:	78fa      	ldrb	r2, [r7, #3]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d002      	beq.n	8006b60 <USBH_FindInterface+0x4e>
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	2bff      	cmp	r3, #255	@ 0xff
 8006b5e:	d111      	bne.n	8006b84 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b64:	78ba      	ldrb	r2, [r7, #2]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d002      	beq.n	8006b70 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b6a:	78bb      	ldrb	r3, [r7, #2]
 8006b6c:	2bff      	cmp	r3, #255	@ 0xff
 8006b6e:	d109      	bne.n	8006b84 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b74:	787a      	ldrb	r2, [r7, #1]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d002      	beq.n	8006b80 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b7a:	787b      	ldrb	r3, [r7, #1]
 8006b7c:	2bff      	cmp	r3, #255	@ 0xff
 8006b7e:	d101      	bne.n	8006b84 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	e006      	b.n	8006b92 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	3301      	adds	r3, #1
 8006b88:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d9d6      	bls.n	8006b3e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006b90:	23ff      	movs	r3, #255	@ 0xff
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 fcf4 	bl	8008594 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006bac:	2101      	movs	r1, #1
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 fe0d 	bl	80087ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b088      	sub	sp, #32
 8006bc4:	af04      	add	r7, sp, #16
 8006bc6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006bc8:	2302      	movs	r3, #2
 8006bca:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d102      	bne.n	8006be2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2203      	movs	r2, #3
 8006be0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b0b      	cmp	r3, #11
 8006bea:	f200 81bb 	bhi.w	8006f64 <USBH_Process+0x3a4>
 8006bee:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf4 <USBH_Process+0x34>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006c25 	.word	0x08006c25
 8006bf8:	08006c57 	.word	0x08006c57
 8006bfc:	08006cbf 	.word	0x08006cbf
 8006c00:	08006eff 	.word	0x08006eff
 8006c04:	08006f65 	.word	0x08006f65
 8006c08:	08006d5f 	.word	0x08006d5f
 8006c0c:	08006ea5 	.word	0x08006ea5
 8006c10:	08006d95 	.word	0x08006d95
 8006c14:	08006db5 	.word	0x08006db5
 8006c18:	08006dd3 	.word	0x08006dd3
 8006c1c:	08006e17 	.word	0x08006e17
 8006c20:	08006ee7 	.word	0x08006ee7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 819b 	beq.w	8006f68 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c38:	20c8      	movs	r0, #200	@ 0xc8
 8006c3a:	f001 fe12 	bl	8008862 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 fd05 	bl	800864e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c54:	e188      	b.n	8006f68 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d107      	bne.n	8006c70 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c6e:	e18a      	b.n	8006f86 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006c76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c7a:	d914      	bls.n	8006ca6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006c82:	3301      	adds	r3, #1
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d903      	bls.n	8006c9e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	220d      	movs	r2, #13
 8006c9a:	701a      	strb	r2, [r3, #0]
      break;
 8006c9c:	e173      	b.n	8006f86 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	701a      	strb	r2, [r3, #0]
      break;
 8006ca4:	e16f      	b.n	8006f86 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006cac:	f103 020a 	add.w	r2, r3, #10
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006cb6:	200a      	movs	r0, #10
 8006cb8:	f001 fdd3 	bl	8008862 <USBH_Delay>
      break;
 8006cbc:	e163      	b.n	8006f86 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006cce:	2104      	movs	r1, #4
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006cd4:	2064      	movs	r0, #100	@ 0x64
 8006cd6:	f001 fdc4 	bl	8008862 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f001 fc90 	bl	8008600 <USBH_LL_GetSpeed>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2205      	movs	r2, #5
 8006cee:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fa9b 	bl	800822e <USBH_AllocPipe>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d00:	2180      	movs	r1, #128	@ 0x80
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 fa93 	bl	800822e <USBH_AllocPipe>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	7919      	ldrb	r1, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d24:	9202      	str	r2, [sp, #8]
 8006d26:	2200      	movs	r2, #0
 8006d28:	9201      	str	r2, [sp, #4]
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2280      	movs	r2, #128	@ 0x80
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 fa4d 	bl	80081d0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	7959      	ldrb	r1, [r3, #5]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d4a:	9202      	str	r2, [sp, #8]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	9201      	str	r2, [sp, #4]
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	4603      	mov	r3, r0
 8006d54:	2200      	movs	r2, #0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fa3a 	bl	80081d0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d5c:	e113      	b.n	8006f86 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f916 	bl	8006f90 <USBH_HandleEnum>
 8006d64:	4603      	mov	r3, r0
 8006d66:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f040 80fd 	bne.w	8006f6c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d103      	bne.n	8006d8c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2208      	movs	r2, #8
 8006d88:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d8a:	e0ef      	b.n	8006f6c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2207      	movs	r2, #7
 8006d90:	701a      	strb	r2, [r3, #0]
      break;
 8006d92:	e0eb      	b.n	8006f6c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80e8 	beq.w	8006f70 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006da6:	2101      	movs	r1, #1
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2208      	movs	r2, #8
 8006db0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006db2:	e0dd      	b.n	8006f70 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fc3a 	bl	8007636 <USBH_SetCfg>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f040 80d5 	bne.w	8006f74 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2209      	movs	r2, #9
 8006dce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dd0:	e0d0      	b.n	8006f74 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d016      	beq.n	8006e0e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006de0:	2101      	movs	r1, #1
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fc4a 	bl	800767c <USBH_SetFeature>
 8006de8:	4603      	mov	r3, r0
 8006dea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d103      	bne.n	8006dfc <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	220a      	movs	r2, #10
 8006df8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dfa:	e0bd      	b.n	8006f78 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	f040 80b9 	bne.w	8006f78 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	220a      	movs	r2, #10
 8006e0a:	701a      	strb	r2, [r3, #0]
      break;
 8006e0c:	e0b4      	b.n	8006f78 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	220a      	movs	r2, #10
 8006e12:	701a      	strb	r2, [r3, #0]
      break;
 8006e14:	e0b0      	b.n	8006f78 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 80ad 	beq.w	8006f7c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	73fb      	strb	r3, [r7, #15]
 8006e2e:	e016      	b.n	8006e5e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e30:	7bfa      	ldrb	r2, [r7, #15]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32de      	adds	r2, #222	@ 0xde
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	791a      	ldrb	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d108      	bne.n	8006e58 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e46:	7bfa      	ldrb	r2, [r7, #15]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	32de      	adds	r2, #222	@ 0xde
 8006e4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006e56:	e005      	b.n	8006e64 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	73fb      	strb	r3, [r7, #15]
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0e5      	beq.n	8006e30 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d016      	beq.n	8006e9c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4798      	blx	r3
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2206      	movs	r2, #6
 8006e84:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e8c:	2103      	movs	r1, #3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e92:	e073      	b.n	8006f7c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	220d      	movs	r2, #13
 8006e98:	701a      	strb	r2, [r3, #0]
      break;
 8006e9a:	e06f      	b.n	8006f7c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	220d      	movs	r2, #13
 8006ea0:	701a      	strb	r2, [r3, #0]
      break;
 8006ea2:	e06b      	b.n	8006f7c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d017      	beq.n	8006ede <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d103      	bne.n	8006ece <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	220b      	movs	r2, #11
 8006eca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ecc:	e058      	b.n	8006f80 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006ece:	7bbb      	ldrb	r3, [r7, #14]
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d154      	bne.n	8006f80 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	220d      	movs	r2, #13
 8006eda:	701a      	strb	r2, [r3, #0]
      break;
 8006edc:	e050      	b.n	8006f80 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	220d      	movs	r2, #13
 8006ee2:	701a      	strb	r2, [r3, #0]
      break;
 8006ee4:	e04c      	b.n	8006f80 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d049      	beq.n	8006f84 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	4798      	blx	r3
      }
      break;
 8006efc:	e042      	b.n	8006f84 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fd4a 	bl	80069a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d009      	beq.n	8006f2a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f3a:	2105      	movs	r1, #5
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d107      	bne.n	8006f5c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff fe22 	bl	8006b9e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f5a:	e014      	b.n	8006f86 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 fb19 	bl	8008594 <USBH_LL_Start>
      break;
 8006f62:	e010      	b.n	8006f86 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006f64:	bf00      	nop
 8006f66:	e00e      	b.n	8006f86 <USBH_Process+0x3c6>
      break;
 8006f68:	bf00      	nop
 8006f6a:	e00c      	b.n	8006f86 <USBH_Process+0x3c6>
      break;
 8006f6c:	bf00      	nop
 8006f6e:	e00a      	b.n	8006f86 <USBH_Process+0x3c6>
    break;
 8006f70:	bf00      	nop
 8006f72:	e008      	b.n	8006f86 <USBH_Process+0x3c6>
      break;
 8006f74:	bf00      	nop
 8006f76:	e006      	b.n	8006f86 <USBH_Process+0x3c6>
      break;
 8006f78:	bf00      	nop
 8006f7a:	e004      	b.n	8006f86 <USBH_Process+0x3c6>
      break;
 8006f7c:	bf00      	nop
 8006f7e:	e002      	b.n	8006f86 <USBH_Process+0x3c6>
      break;
 8006f80:	bf00      	nop
 8006f82:	e000      	b.n	8006f86 <USBH_Process+0x3c6>
      break;
 8006f84:	bf00      	nop
  }
  return USBH_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af04      	add	r7, sp, #16
 8006f96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b07      	cmp	r3, #7
 8006fa6:	f200 81bd 	bhi.w	8007324 <USBH_HandleEnum+0x394>
 8006faa:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb0 <USBH_HandleEnum+0x20>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fd1 	.word	0x08006fd1
 8006fb4:	0800708b 	.word	0x0800708b
 8006fb8:	080070f5 	.word	0x080070f5
 8006fbc:	0800717f 	.word	0x0800717f
 8006fc0:	080071e9 	.word	0x080071e9
 8006fc4:	08007259 	.word	0x08007259
 8006fc8:	0800729f 	.word	0x0800729f
 8006fcc:	080072e5 	.word	0x080072e5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006fd0:	2108      	movs	r1, #8
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fa4c 	bl	8007470 <USBH_Get_DevDesc>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d12e      	bne.n	8007040 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	7919      	ldrb	r1, [r3, #4]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007006:	9202      	str	r2, [sp, #8]
 8007008:	2200      	movs	r2, #0
 800700a:	9201      	str	r2, [sp, #4]
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	4603      	mov	r3, r0
 8007010:	2280      	movs	r2, #128	@ 0x80
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 f8dc 	bl	80081d0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	7959      	ldrb	r1, [r3, #5]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800702c:	9202      	str	r2, [sp, #8]
 800702e:	2200      	movs	r2, #0
 8007030:	9201      	str	r2, [sp, #4]
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	4603      	mov	r3, r0
 8007036:	2200      	movs	r2, #0
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 f8c9 	bl	80081d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800703e:	e173      	b.n	8007328 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	2b03      	cmp	r3, #3
 8007044:	f040 8170 	bne.w	8007328 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800704e:	3301      	adds	r3, #1
 8007050:	b2da      	uxtb	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800705e:	2b03      	cmp	r3, #3
 8007060:	d903      	bls.n	800706a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	220d      	movs	r2, #13
 8007066:	701a      	strb	r2, [r3, #0]
      break;
 8007068:	e15e      	b.n	8007328 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	795b      	ldrb	r3, [r3, #5]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 f8fd 	bl	8008270 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	791b      	ldrb	r3, [r3, #4]
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 f8f7 	bl	8008270 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
      break;
 8007088:	e14e      	b.n	8007328 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800708a:	2112      	movs	r1, #18
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f9ef 	bl	8007470 <USBH_Get_DevDesc>
 8007092:	4603      	mov	r3, r0
 8007094:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007096:	7bbb      	ldrb	r3, [r7, #14]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d103      	bne.n	80070a4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070a2:	e143      	b.n	800732c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	f040 8140 	bne.w	800732c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070b2:	3301      	adds	r3, #1
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d903      	bls.n	80070ce <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	220d      	movs	r2, #13
 80070ca:	701a      	strb	r2, [r3, #0]
      break;
 80070cc:	e12e      	b.n	800732c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	795b      	ldrb	r3, [r3, #5]
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f001 f8cb 	bl	8008270 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	791b      	ldrb	r3, [r3, #4]
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 f8c5 	bl	8008270 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	701a      	strb	r2, [r3, #0]
      break;
 80070f2:	e11b      	b.n	800732c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80070f4:	2101      	movs	r1, #1
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa79 	bl	80075ee <USBH_SetAddress>
 80070fc:	4603      	mov	r3, r0
 80070fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d130      	bne.n	8007168 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007106:	2002      	movs	r0, #2
 8007108:	f001 fbab 	bl	8008862 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2203      	movs	r2, #3
 8007118:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	7919      	ldrb	r1, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800712e:	9202      	str	r2, [sp, #8]
 8007130:	2200      	movs	r2, #0
 8007132:	9201      	str	r2, [sp, #4]
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	4603      	mov	r3, r0
 8007138:	2280      	movs	r2, #128	@ 0x80
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 f848 	bl	80081d0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	7959      	ldrb	r1, [r3, #5]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007154:	9202      	str	r2, [sp, #8]
 8007156:	2200      	movs	r2, #0
 8007158:	9201      	str	r2, [sp, #4]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	4603      	mov	r3, r0
 800715e:	2200      	movs	r2, #0
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 f835 	bl	80081d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007166:	e0e3      	b.n	8007330 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007168:	7bbb      	ldrb	r3, [r7, #14]
 800716a:	2b03      	cmp	r3, #3
 800716c:	f040 80e0 	bne.w	8007330 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	220d      	movs	r2, #13
 8007174:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	705a      	strb	r2, [r3, #1]
      break;
 800717c:	e0d8      	b.n	8007330 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800717e:	2109      	movs	r1, #9
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f9a1 	bl	80074c8 <USBH_Get_CfgDesc>
 8007186:	4603      	mov	r3, r0
 8007188:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d103      	bne.n	8007198 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2204      	movs	r2, #4
 8007194:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007196:	e0cd      	b.n	8007334 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	2b03      	cmp	r3, #3
 800719c:	f040 80ca 	bne.w	8007334 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071a6:	3301      	adds	r3, #1
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d903      	bls.n	80071c2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	220d      	movs	r2, #13
 80071be:	701a      	strb	r2, [r3, #0]
      break;
 80071c0:	e0b8      	b.n	8007334 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	795b      	ldrb	r3, [r3, #5]
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 f851 	bl	8008270 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	791b      	ldrb	r3, [r3, #4]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 f84b 	bl	8008270 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	701a      	strb	r2, [r3, #0]
      break;
 80071e6:	e0a5      	b.n	8007334 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f969 	bl	80074c8 <USBH_Get_CfgDesc>
 80071f6:	4603      	mov	r3, r0
 80071f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d103      	bne.n	8007208 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2205      	movs	r2, #5
 8007204:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007206:	e097      	b.n	8007338 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007208:	7bbb      	ldrb	r3, [r7, #14]
 800720a:	2b03      	cmp	r3, #3
 800720c:	f040 8094 	bne.w	8007338 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007216:	3301      	adds	r3, #1
 8007218:	b2da      	uxtb	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007226:	2b03      	cmp	r3, #3
 8007228:	d903      	bls.n	8007232 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	220d      	movs	r2, #13
 800722e:	701a      	strb	r2, [r3, #0]
      break;
 8007230:	e082      	b.n	8007338 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	795b      	ldrb	r3, [r3, #5]
 8007236:	4619      	mov	r1, r3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 f819 	bl	8008270 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	791b      	ldrb	r3, [r3, #4]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 f813 	bl	8008270 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	701a      	strb	r2, [r3, #0]
      break;
 8007256:	e06f      	b.n	8007338 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800725e:	2b00      	cmp	r3, #0
 8007260:	d019      	beq.n	8007296 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800726e:	23ff      	movs	r3, #255	@ 0xff
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f953 	bl	800751c <USBH_Get_StringDesc>
 8007276:	4603      	mov	r3, r0
 8007278:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d103      	bne.n	8007288 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2206      	movs	r2, #6
 8007284:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007286:	e059      	b.n	800733c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	2b03      	cmp	r3, #3
 800728c:	d156      	bne.n	800733c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2206      	movs	r2, #6
 8007292:	705a      	strb	r2, [r3, #1]
      break;
 8007294:	e052      	b.n	800733c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2206      	movs	r2, #6
 800729a:	705a      	strb	r2, [r3, #1]
      break;
 800729c:	e04e      	b.n	800733c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d019      	beq.n	80072dc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072b4:	23ff      	movs	r3, #255	@ 0xff
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f930 	bl	800751c <USBH_Get_StringDesc>
 80072bc:	4603      	mov	r3, r0
 80072be:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d103      	bne.n	80072ce <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2207      	movs	r2, #7
 80072ca:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072cc:	e038      	b.n	8007340 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d135      	bne.n	8007340 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2207      	movs	r2, #7
 80072d8:	705a      	strb	r2, [r3, #1]
      break;
 80072da:	e031      	b.n	8007340 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2207      	movs	r2, #7
 80072e0:	705a      	strb	r2, [r3, #1]
      break;
 80072e2:	e02d      	b.n	8007340 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d017      	beq.n	800731e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80072fa:	23ff      	movs	r3, #255	@ 0xff
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f90d 	bl	800751c <USBH_Get_StringDesc>
 8007302:	4603      	mov	r3, r0
 8007304:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007306:	7bbb      	ldrb	r3, [r7, #14]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d102      	bne.n	8007312 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007310:	e018      	b.n	8007344 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	2b03      	cmp	r3, #3
 8007316:	d115      	bne.n	8007344 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	73fb      	strb	r3, [r7, #15]
      break;
 800731c:	e012      	b.n	8007344 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]
      break;
 8007322:	e00f      	b.n	8007344 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007324:	bf00      	nop
 8007326:	e00e      	b.n	8007346 <USBH_HandleEnum+0x3b6>
      break;
 8007328:	bf00      	nop
 800732a:	e00c      	b.n	8007346 <USBH_HandleEnum+0x3b6>
      break;
 800732c:	bf00      	nop
 800732e:	e00a      	b.n	8007346 <USBH_HandleEnum+0x3b6>
      break;
 8007330:	bf00      	nop
 8007332:	e008      	b.n	8007346 <USBH_HandleEnum+0x3b6>
      break;
 8007334:	bf00      	nop
 8007336:	e006      	b.n	8007346 <USBH_HandleEnum+0x3b6>
      break;
 8007338:	bf00      	nop
 800733a:	e004      	b.n	8007346 <USBH_HandleEnum+0x3b6>
      break;
 800733c:	bf00      	nop
 800733e:	e002      	b.n	8007346 <USBH_HandleEnum+0x3b6>
      break;
 8007340:	bf00      	nop
 8007342:	e000      	b.n	8007346 <USBH_HandleEnum+0x3b6>
      break;
 8007344:	bf00      	nop
  }
  return Status;
 8007346:	7bfb      	ldrb	r3, [r7, #15]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f804 	bl	8007392 <USBH_HandleSof>
}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b082      	sub	sp, #8
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b0b      	cmp	r3, #11
 80073a2:	d10a      	bne.n	80073ba <USBH_HandleSof+0x28>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
  }
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80073d2:	bf00      	nop
}
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80073ee:	bf00      	nop
}
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 f8be 	bl	80085ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	791b      	ldrb	r3, [r3, #4]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 ff0b 	bl	8008270 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	795b      	ldrb	r3, [r3, #5]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 ff05 	bl	8008270 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af02      	add	r7, sp, #8
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800747c:	887b      	ldrh	r3, [r7, #2]
 800747e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007482:	d901      	bls.n	8007488 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007484:	2303      	movs	r3, #3
 8007486:	e01b      	b.n	80074c0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800748e:	887b      	ldrh	r3, [r7, #2]
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	4613      	mov	r3, r2
 8007494:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007498:	2100      	movs	r1, #0
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f872 	bl	8007584 <USBH_GetDescriptor>
 80074a0:	4603      	mov	r3, r0
 80074a2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d109      	bne.n	80074be <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80074b0:	887a      	ldrh	r2, [r7, #2]
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f929 	bl	800770c <USBH_ParseDevDesc>
 80074ba:	4603      	mov	r3, r0
 80074bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	331c      	adds	r3, #28
 80074d8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80074da:	887b      	ldrh	r3, [r7, #2]
 80074dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074e0:	d901      	bls.n	80074e6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e016      	b.n	8007514 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80074e6:	887b      	ldrh	r3, [r7, #2]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074f0:	2100      	movs	r1, #0
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f846 	bl	8007584 <USBH_GetDescriptor>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d107      	bne.n	8007512 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007502:	887b      	ldrh	r3, [r7, #2]
 8007504:	461a      	mov	r2, r3
 8007506:	68b9      	ldr	r1, [r7, #8]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f9af 	bl	800786c <USBH_ParseCfgDesc>
 800750e:	4603      	mov	r3, r0
 8007510:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af02      	add	r7, sp, #8
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	461a      	mov	r2, r3
 8007528:	460b      	mov	r3, r1
 800752a:	72fb      	strb	r3, [r7, #11]
 800752c:	4613      	mov	r3, r2
 800752e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007530:	893b      	ldrh	r3, [r7, #8]
 8007532:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007536:	d802      	bhi.n	800753e <USBH_Get_StringDesc+0x22>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800753e:	2303      	movs	r3, #3
 8007540:	e01c      	b.n	800757c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007542:	7afb      	ldrb	r3, [r7, #11]
 8007544:	b29b      	uxth	r3, r3
 8007546:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800754a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007552:	893b      	ldrh	r3, [r7, #8]
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	460b      	mov	r3, r1
 8007558:	2100      	movs	r1, #0
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 f812 	bl	8007584 <USBH_GetDescriptor>
 8007560:	4603      	mov	r3, r0
 8007562:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d107      	bne.n	800757a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007570:	893a      	ldrh	r2, [r7, #8]
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fb8d 	bl	8007c94 <USBH_ParseStringDesc>
  }

  return status;
 800757a:	7dfb      	ldrb	r3, [r7, #23]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	607b      	str	r3, [r7, #4]
 800758e:	460b      	mov	r3, r1
 8007590:	72fb      	strb	r3, [r7, #11]
 8007592:	4613      	mov	r3, r2
 8007594:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	789b      	ldrb	r3, [r3, #2]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d11c      	bne.n	80075d8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800759e:	7afb      	ldrb	r3, [r7, #11]
 80075a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2206      	movs	r2, #6
 80075ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	893a      	ldrh	r2, [r7, #8]
 80075b4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075b6:	893b      	ldrh	r3, [r7, #8]
 80075b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80075bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075c0:	d104      	bne.n	80075cc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f240 4209 	movw	r2, #1033	@ 0x409
 80075c8:	829a      	strh	r2, [r3, #20]
 80075ca:	e002      	b.n	80075d2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8b3a      	ldrh	r2, [r7, #24]
 80075d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80075d8:	8b3b      	ldrh	r3, [r7, #24]
 80075da:	461a      	mov	r2, r3
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 fba5 	bl	8007d2e <USBH_CtlReq>
 80075e4:	4603      	mov	r3, r0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	789b      	ldrb	r3, [r3, #2]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d10f      	bne.n	8007622 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2205      	movs	r2, #5
 800760c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800760e:	78fb      	ldrb	r3, [r7, #3]
 8007610:	b29a      	uxth	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007622:	2200      	movs	r2, #0
 8007624:	2100      	movs	r1, #0
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fb81 	bl	8007d2e <USBH_CtlReq>
 800762c:	4603      	mov	r3, r0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	789b      	ldrb	r3, [r3, #2]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d10e      	bne.n	8007668 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2209      	movs	r2, #9
 8007654:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	887a      	ldrh	r2, [r7, #2]
 800765a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007668:	2200      	movs	r2, #0
 800766a:	2100      	movs	r1, #0
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fb5e 	bl	8007d2e <USBH_CtlReq>
 8007672:	4603      	mov	r3, r0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	460b      	mov	r3, r1
 8007686:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	789b      	ldrb	r3, [r3, #2]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d10f      	bne.n	80076b0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2203      	movs	r2, #3
 800769a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800769c:	78fb      	ldrb	r3, [r7, #3]
 800769e:	b29a      	uxth	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076b0:	2200      	movs	r2, #0
 80076b2:	2100      	movs	r1, #0
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fb3a 	bl	8007d2e <USBH_CtlReq>
 80076ba:	4603      	mov	r3, r0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	789b      	ldrb	r3, [r3, #2]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d10f      	bne.n	80076f8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80076ea:	78fb      	ldrb	r3, [r7, #3]
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076f8:	2200      	movs	r2, #0
 80076fa:	2100      	movs	r1, #0
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fb16 	bl	8007d2e <USBH_CtlReq>
 8007702:	4603      	mov	r3, r0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	4613      	mov	r3, r2
 8007718:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007720:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800772c:	2302      	movs	r3, #2
 800772e:	e094      	b.n	800785a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	781a      	ldrb	r2, [r3, #0]
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	785a      	ldrb	r2, [r3, #1]
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	3302      	adds	r3, #2
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	3303      	adds	r3, #3
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	021b      	lsls	r3, r3, #8
 8007750:	b29b      	uxth	r3, r3
 8007752:	4313      	orrs	r3, r2
 8007754:	b29a      	uxth	r2, r3
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	791a      	ldrb	r2, [r3, #4]
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	795a      	ldrb	r2, [r3, #5]
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	799a      	ldrb	r2, [r3, #6]
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	79da      	ldrb	r2, [r3, #7]
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007780:	2b00      	cmp	r3, #0
 8007782:	d004      	beq.n	800778e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800778a:	2b01      	cmp	r3, #1
 800778c:	d11b      	bne.n	80077c6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	79db      	ldrb	r3, [r3, #7]
 8007792:	2b20      	cmp	r3, #32
 8007794:	dc0f      	bgt.n	80077b6 <USBH_ParseDevDesc+0xaa>
 8007796:	2b08      	cmp	r3, #8
 8007798:	db0f      	blt.n	80077ba <USBH_ParseDevDesc+0xae>
 800779a:	3b08      	subs	r3, #8
 800779c:	4a32      	ldr	r2, [pc, #200]	@ (8007868 <USBH_ParseDevDesc+0x15c>)
 800779e:	fa22 f303 	lsr.w	r3, r2, r3
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bf14      	ite	ne
 80077aa:	2301      	movne	r3, #1
 80077ac:	2300      	moveq	r3, #0
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d106      	bne.n	80077c2 <USBH_ParseDevDesc+0xb6>
 80077b4:	e001      	b.n	80077ba <USBH_ParseDevDesc+0xae>
 80077b6:	2b40      	cmp	r3, #64	@ 0x40
 80077b8:	d003      	beq.n	80077c2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	2208      	movs	r2, #8
 80077be:	71da      	strb	r2, [r3, #7]
        break;
 80077c0:	e000      	b.n	80077c4 <USBH_ParseDevDesc+0xb8>
        break;
 80077c2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80077c4:	e00e      	b.n	80077e4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d107      	bne.n	80077e0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	79db      	ldrb	r3, [r3, #7]
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d005      	beq.n	80077e4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2208      	movs	r2, #8
 80077dc:	71da      	strb	r2, [r3, #7]
 80077de:	e001      	b.n	80077e4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80077e0:	2303      	movs	r3, #3
 80077e2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80077e4:	88fb      	ldrh	r3, [r7, #6]
 80077e6:	2b08      	cmp	r3, #8
 80077e8:	d936      	bls.n	8007858 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	3308      	adds	r3, #8
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	3309      	adds	r3, #9
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	021b      	lsls	r3, r3, #8
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	4313      	orrs	r3, r2
 80077fe:	b29a      	uxth	r2, r3
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	330a      	adds	r3, #10
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	330b      	adds	r3, #11
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	021b      	lsls	r3, r3, #8
 8007814:	b29b      	uxth	r3, r3
 8007816:	4313      	orrs	r3, r2
 8007818:	b29a      	uxth	r2, r3
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	330c      	adds	r3, #12
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	330d      	adds	r3, #13
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	b29b      	uxth	r3, r3
 8007830:	4313      	orrs	r3, r2
 8007832:	b29a      	uxth	r2, r3
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	7b9a      	ldrb	r2, [r3, #14]
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	7bda      	ldrb	r2, [r3, #15]
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	7c1a      	ldrb	r2, [r3, #16]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	7c5a      	ldrb	r2, [r3, #17]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007858:	7dfb      	ldrb	r3, [r7, #23]
}
 800785a:	4618      	mov	r0, r3
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	01000101 	.word	0x01000101

0800786c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08c      	sub	sp, #48	@ 0x30
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	4613      	mov	r3, r2
 8007878:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007880:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800789a:	2302      	movs	r3, #2
 800789c:	e0da      	b.n	8007a54 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80078a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b09      	cmp	r3, #9
 80078a8:	d002      	beq.n	80078b0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80078aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ac:	2209      	movs	r2, #9
 80078ae:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	781a      	ldrb	r2, [r3, #0]
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	785a      	ldrb	r2, [r3, #1]
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	3302      	adds	r3, #2
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	3303      	adds	r3, #3
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	021b      	lsls	r3, r3, #8
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	4313      	orrs	r3, r2
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078da:	bf28      	it	cs
 80078dc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	6a3b      	ldr	r3, [r7, #32]
 80078e4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	791a      	ldrb	r2, [r3, #4]
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	795a      	ldrb	r2, [r3, #5]
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	799a      	ldrb	r2, [r3, #6]
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	79da      	ldrb	r2, [r3, #7]
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	7a1a      	ldrb	r2, [r3, #8]
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	2b09      	cmp	r3, #9
 8007912:	f240 809d 	bls.w	8007a50 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007916:	2309      	movs	r3, #9
 8007918:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800791a:	2300      	movs	r3, #0
 800791c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800791e:	e081      	b.n	8007a24 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007920:	f107 0316 	add.w	r3, r7, #22
 8007924:	4619      	mov	r1, r3
 8007926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007928:	f000 f9e7 	bl	8007cfa <USBH_GetNextDesc>
 800792c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800792e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007930:	785b      	ldrb	r3, [r3, #1]
 8007932:	2b04      	cmp	r3, #4
 8007934:	d176      	bne.n	8007a24 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b09      	cmp	r3, #9
 800793c:	d002      	beq.n	8007944 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800793e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007940:	2209      	movs	r2, #9
 8007942:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007948:	221a      	movs	r2, #26
 800794a:	fb02 f303 	mul.w	r3, r2, r3
 800794e:	3308      	adds	r3, #8
 8007950:	6a3a      	ldr	r2, [r7, #32]
 8007952:	4413      	add	r3, r2
 8007954:	3302      	adds	r3, #2
 8007956:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007958:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800795a:	69f8      	ldr	r0, [r7, #28]
 800795c:	f000 f87e 	bl	8007a5c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007966:	2300      	movs	r3, #0
 8007968:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800796a:	e043      	b.n	80079f4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800796c:	f107 0316 	add.w	r3, r7, #22
 8007970:	4619      	mov	r1, r3
 8007972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007974:	f000 f9c1 	bl	8007cfa <USBH_GetNextDesc>
 8007978:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800797a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b05      	cmp	r3, #5
 8007980:	d138      	bne.n	80079f4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	795b      	ldrb	r3, [r3, #5]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d113      	bne.n	80079b2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800798e:	2b02      	cmp	r3, #2
 8007990:	d003      	beq.n	800799a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	799b      	ldrb	r3, [r3, #6]
 8007996:	2b03      	cmp	r3, #3
 8007998:	d10b      	bne.n	80079b2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	79db      	ldrb	r3, [r3, #7]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10b      	bne.n	80079ba <USBH_ParseCfgDesc+0x14e>
 80079a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	2b09      	cmp	r3, #9
 80079a8:	d007      	beq.n	80079ba <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80079aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ac:	2209      	movs	r2, #9
 80079ae:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079b0:	e003      	b.n	80079ba <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80079b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b4:	2207      	movs	r2, #7
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	e000      	b.n	80079bc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079ba:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80079bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079c0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80079c4:	3201      	adds	r2, #1
 80079c6:	00d2      	lsls	r2, r2, #3
 80079c8:	211a      	movs	r1, #26
 80079ca:	fb01 f303 	mul.w	r3, r1, r3
 80079ce:	4413      	add	r3, r2
 80079d0:	3308      	adds	r3, #8
 80079d2:	6a3a      	ldr	r2, [r7, #32]
 80079d4:	4413      	add	r3, r2
 80079d6:	3304      	adds	r3, #4
 80079d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80079da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079dc:	69b9      	ldr	r1, [r7, #24]
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 f870 	bl	8007ac4 <USBH_ParseEPDesc>
 80079e4:	4603      	mov	r3, r0
 80079e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80079ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80079ee:	3301      	adds	r3, #1
 80079f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	791b      	ldrb	r3, [r3, #4]
 80079f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d204      	bcs.n	8007a0a <USBH_ParseCfgDesc+0x19e>
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	885a      	ldrh	r2, [r3, #2]
 8007a04:	8afb      	ldrh	r3, [r7, #22]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d8b0      	bhi.n	800796c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	791b      	ldrb	r3, [r3, #4]
 8007a0e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d201      	bcs.n	8007a1a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e01c      	b.n	8007a54 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a1e:	3301      	adds	r3, #1
 8007a20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d805      	bhi.n	8007a38 <USBH_ParseCfgDesc+0x1cc>
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	885a      	ldrh	r2, [r3, #2]
 8007a30:	8afb      	ldrh	r3, [r7, #22]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	f63f af74 	bhi.w	8007920 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	791b      	ldrb	r3, [r3, #4]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	bf28      	it	cs
 8007a40:	2302      	movcs	r3, #2
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d201      	bcs.n	8007a50 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e001      	b.n	8007a54 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007a50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3730      	adds	r7, #48	@ 0x30
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781a      	ldrb	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	785a      	ldrb	r2, [r3, #1]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	789a      	ldrb	r2, [r3, #2]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	78da      	ldrb	r2, [r3, #3]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	bf28      	it	cs
 8007a90:	2302      	movcs	r3, #2
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	795a      	ldrb	r2, [r3, #5]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	799a      	ldrb	r2, [r3, #6]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	79da      	ldrb	r2, [r3, #7]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	7a1a      	ldrb	r2, [r3, #8]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	721a      	strb	r2, [r3, #8]
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	781a      	ldrb	r2, [r3, #0]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	785a      	ldrb	r2, [r3, #1]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	789a      	ldrb	r2, [r3, #2]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	78da      	ldrb	r2, [r3, #3]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3304      	adds	r3, #4
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3305      	adds	r3, #5
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	021b      	lsls	r3, r3, #8
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	4313      	orrs	r3, r2
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	799a      	ldrb	r2, [r3, #6]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	889b      	ldrh	r3, [r3, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d009      	beq.n	8007b32 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b26:	d804      	bhi.n	8007b32 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b30:	d901      	bls.n	8007b36 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007b32:	2303      	movs	r3, #3
 8007b34:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d136      	bne.n	8007bae <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	78db      	ldrb	r3, [r3, #3]
 8007b44:	f003 0303 	and.w	r3, r3, #3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d108      	bne.n	8007b5e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	889b      	ldrh	r3, [r3, #4]
 8007b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b54:	f240 8097 	bls.w	8007c86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	75fb      	strb	r3, [r7, #23]
 8007b5c:	e093      	b.n	8007c86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	78db      	ldrb	r3, [r3, #3]
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d107      	bne.n	8007b7a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	889b      	ldrh	r3, [r3, #4]
 8007b6e:	2b40      	cmp	r3, #64	@ 0x40
 8007b70:	f240 8089 	bls.w	8007c86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b74:	2303      	movs	r3, #3
 8007b76:	75fb      	strb	r3, [r7, #23]
 8007b78:	e085      	b.n	8007c86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	78db      	ldrb	r3, [r3, #3]
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d005      	beq.n	8007b92 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	78db      	ldrb	r3, [r3, #3]
 8007b8a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d10a      	bne.n	8007ba8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	799b      	ldrb	r3, [r3, #6]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <USBH_ParseEPDesc+0xde>
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	799b      	ldrb	r3, [r3, #6]
 8007b9e:	2b10      	cmp	r3, #16
 8007ba0:	d970      	bls.n	8007c84 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007ba6:	e06d      	b.n	8007c84 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	75fb      	strb	r3, [r7, #23]
 8007bac:	e06b      	b.n	8007c86 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d13c      	bne.n	8007c32 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	78db      	ldrb	r3, [r3, #3]
 8007bbc:	f003 0303 	and.w	r3, r3, #3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d005      	beq.n	8007bd0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	78db      	ldrb	r3, [r3, #3]
 8007bc8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d106      	bne.n	8007bde <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	889b      	ldrh	r3, [r3, #4]
 8007bd4:	2b40      	cmp	r3, #64	@ 0x40
 8007bd6:	d956      	bls.n	8007c86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007bdc:	e053      	b.n	8007c86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	78db      	ldrb	r3, [r3, #3]
 8007be2:	f003 0303 	and.w	r3, r3, #3
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d10e      	bne.n	8007c08 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	799b      	ldrb	r3, [r3, #6]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d007      	beq.n	8007c02 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007bf6:	2b10      	cmp	r3, #16
 8007bf8:	d803      	bhi.n	8007c02 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007bfe:	2b40      	cmp	r3, #64	@ 0x40
 8007c00:	d941      	bls.n	8007c86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c02:	2303      	movs	r3, #3
 8007c04:	75fb      	strb	r3, [r7, #23]
 8007c06:	e03e      	b.n	8007c86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	78db      	ldrb	r3, [r3, #3]
 8007c0c:	f003 0303 	and.w	r3, r3, #3
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d10b      	bne.n	8007c2c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	799b      	ldrb	r3, [r3, #6]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d004      	beq.n	8007c26 <USBH_ParseEPDesc+0x162>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	889b      	ldrh	r3, [r3, #4]
 8007c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c24:	d32f      	bcc.n	8007c86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c26:	2303      	movs	r3, #3
 8007c28:	75fb      	strb	r3, [r7, #23]
 8007c2a:	e02c      	b.n	8007c86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	75fb      	strb	r3, [r7, #23]
 8007c30:	e029      	b.n	8007c86 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d120      	bne.n	8007c7e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	78db      	ldrb	r3, [r3, #3]
 8007c40:	f003 0303 	and.w	r3, r3, #3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d106      	bne.n	8007c56 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	889b      	ldrh	r3, [r3, #4]
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d01a      	beq.n	8007c86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c50:	2303      	movs	r3, #3
 8007c52:	75fb      	strb	r3, [r7, #23]
 8007c54:	e017      	b.n	8007c86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	78db      	ldrb	r3, [r3, #3]
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d10a      	bne.n	8007c78 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	799b      	ldrb	r3, [r3, #6]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <USBH_ParseEPDesc+0x1ae>
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	889b      	ldrh	r3, [r3, #4]
 8007c6e:	2b08      	cmp	r3, #8
 8007c70:	d909      	bls.n	8007c86 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c72:	2303      	movs	r3, #3
 8007c74:	75fb      	strb	r3, [r7, #23]
 8007c76:	e006      	b.n	8007c86 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	75fb      	strb	r3, [r7, #23]
 8007c7c:	e003      	b.n	8007c86 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	75fb      	strb	r3, [r7, #23]
 8007c82:	e000      	b.n	8007c86 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c84:	bf00      	nop
  }

  return status;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d120      	bne.n	8007cee <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	1e9a      	subs	r2, r3, #2
 8007cb2:	88fb      	ldrh	r3, [r7, #6]
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	bf28      	it	cs
 8007cb8:	4613      	movcs	r3, r2
 8007cba:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	3302      	adds	r3, #2
 8007cc0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	82fb      	strh	r3, [r7, #22]
 8007cc6:	e00b      	b.n	8007ce0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007cc8:	8afb      	ldrh	r3, [r7, #22]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4413      	add	r3, r2
 8007cce:	781a      	ldrb	r2, [r3, #0]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007cda:	8afb      	ldrh	r3, [r7, #22]
 8007cdc:	3302      	adds	r3, #2
 8007cde:	82fb      	strh	r3, [r7, #22]
 8007ce0:	8afa      	ldrh	r2, [r7, #22]
 8007ce2:	8abb      	ldrh	r3, [r7, #20]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d3ef      	bcc.n	8007cc8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2200      	movs	r2, #0
 8007cec:	701a      	strb	r2, [r3, #0]
  }
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7812      	ldrb	r2, [r2, #0]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d20:	68fb      	ldr	r3, [r7, #12]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b086      	sub	sp, #24
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	789b      	ldrb	r3, [r3, #2]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d002      	beq.n	8007d4e <USBH_CtlReq+0x20>
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d00f      	beq.n	8007d6c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007d4c:	e027      	b.n	8007d9e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	88fa      	ldrh	r2, [r7, #6]
 8007d58:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2202      	movs	r2, #2
 8007d64:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d66:	2301      	movs	r3, #1
 8007d68:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6a:	e018      	b.n	8007d9e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 f81b 	bl	8007da8 <USBH_HandleControl>
 8007d72:	4603      	mov	r3, r0
 8007d74:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <USBH_CtlReq+0x54>
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d106      	bne.n	8007d90 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	761a      	strb	r2, [r3, #24]
      break;
 8007d8e:	e005      	b.n	8007d9c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d102      	bne.n	8007d9c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	709a      	strb	r2, [r3, #2]
      break;
 8007d9c:	bf00      	nop
  }
  return status;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007db0:	2301      	movs	r3, #1
 8007db2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	7e1b      	ldrb	r3, [r3, #24]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	2b0a      	cmp	r3, #10
 8007dc0:	f200 8156 	bhi.w	8008070 <USBH_HandleControl+0x2c8>
 8007dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dcc <USBH_HandleControl+0x24>)
 8007dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dca:	bf00      	nop
 8007dcc:	08007df9 	.word	0x08007df9
 8007dd0:	08007e13 	.word	0x08007e13
 8007dd4:	08007e7d 	.word	0x08007e7d
 8007dd8:	08007ea3 	.word	0x08007ea3
 8007ddc:	08007edb 	.word	0x08007edb
 8007de0:	08007f05 	.word	0x08007f05
 8007de4:	08007f57 	.word	0x08007f57
 8007de8:	08007f79 	.word	0x08007f79
 8007dec:	08007fb5 	.word	0x08007fb5
 8007df0:	08007fdb 	.word	0x08007fdb
 8007df4:	08008019 	.word	0x08008019
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f103 0110 	add.w	r1, r3, #16
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	795b      	ldrb	r3, [r3, #5]
 8007e02:	461a      	mov	r2, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f943 	bl	8008090 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	761a      	strb	r2, [r3, #24]
      break;
 8007e10:	e139      	b.n	8008086 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	795b      	ldrb	r3, [r3, #5]
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fcc5 	bl	80087a8 <USBH_LL_GetURBState>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d11e      	bne.n	8007e66 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	7c1b      	ldrb	r3, [r3, #16]
 8007e2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007e30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	8adb      	ldrh	r3, [r3, #22]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e3a:	7b7b      	ldrb	r3, [r7, #13]
 8007e3c:	2b80      	cmp	r3, #128	@ 0x80
 8007e3e:	d103      	bne.n	8007e48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2203      	movs	r2, #3
 8007e44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e46:	e115      	b.n	8008074 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2205      	movs	r2, #5
 8007e4c:	761a      	strb	r2, [r3, #24]
      break;
 8007e4e:	e111      	b.n	8008074 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007e50:	7b7b      	ldrb	r3, [r7, #13]
 8007e52:	2b80      	cmp	r3, #128	@ 0x80
 8007e54:	d103      	bne.n	8007e5e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2209      	movs	r2, #9
 8007e5a:	761a      	strb	r2, [r3, #24]
      break;
 8007e5c:	e10a      	b.n	8008074 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2207      	movs	r2, #7
 8007e62:	761a      	strb	r2, [r3, #24]
      break;
 8007e64:	e106      	b.n	8008074 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d003      	beq.n	8007e74 <USBH_HandleControl+0xcc>
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	f040 8100 	bne.w	8008074 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	220b      	movs	r2, #11
 8007e78:	761a      	strb	r2, [r3, #24]
      break;
 8007e7a:	e0fb      	b.n	8008074 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6899      	ldr	r1, [r3, #8]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	899a      	ldrh	r2, [r3, #12]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	791b      	ldrb	r3, [r3, #4]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f93a 	bl	800810e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2204      	movs	r2, #4
 8007e9e:	761a      	strb	r2, [r3, #24]
      break;
 8007ea0:	e0f1      	b.n	8008086 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	791b      	ldrb	r3, [r3, #4]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fc7d 	bl	80087a8 <USBH_LL_GetURBState>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d102      	bne.n	8007ebe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2209      	movs	r2, #9
 8007ebc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	2b05      	cmp	r3, #5
 8007ec2:	d102      	bne.n	8007eca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ec8:	e0d6      	b.n	8008078 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007eca:	7bbb      	ldrb	r3, [r7, #14]
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	f040 80d3 	bne.w	8008078 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	220b      	movs	r2, #11
 8007ed6:	761a      	strb	r2, [r3, #24]
      break;
 8007ed8:	e0ce      	b.n	8008078 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6899      	ldr	r1, [r3, #8]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	899a      	ldrh	r2, [r3, #12]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	795b      	ldrb	r3, [r3, #5]
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	9000      	str	r0, [sp, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f8ea 	bl	80080c4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2206      	movs	r2, #6
 8007f00:	761a      	strb	r2, [r3, #24]
      break;
 8007f02:	e0c0      	b.n	8008086 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	795b      	ldrb	r3, [r3, #5]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fc4c 	bl	80087a8 <USBH_LL_GetURBState>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d103      	bne.n	8007f22 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2207      	movs	r2, #7
 8007f1e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f20:	e0ac      	b.n	800807c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b05      	cmp	r3, #5
 8007f26:	d105      	bne.n	8007f34 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	220c      	movs	r2, #12
 8007f2c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	73fb      	strb	r3, [r7, #15]
      break;
 8007f32:	e0a3      	b.n	800807c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d103      	bne.n	8007f42 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2205      	movs	r2, #5
 8007f3e:	761a      	strb	r2, [r3, #24]
      break;
 8007f40:	e09c      	b.n	800807c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	f040 8099 	bne.w	800807c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	220b      	movs	r2, #11
 8007f4e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007f50:	2302      	movs	r3, #2
 8007f52:	73fb      	strb	r3, [r7, #15]
      break;
 8007f54:	e092      	b.n	800807c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	791b      	ldrb	r3, [r3, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f8d5 	bl	800810e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2208      	movs	r2, #8
 8007f74:	761a      	strb	r2, [r3, #24]

      break;
 8007f76:	e086      	b.n	8008086 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	791b      	ldrb	r3, [r3, #4]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fc12 	bl	80087a8 <USBH_LL_GetURBState>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d105      	bne.n	8007f9a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	220d      	movs	r2, #13
 8007f92:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f98:	e072      	b.n	8008080 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007f9a:	7bbb      	ldrb	r3, [r7, #14]
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	d103      	bne.n	8007fa8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	220b      	movs	r2, #11
 8007fa4:	761a      	strb	r2, [r3, #24]
      break;
 8007fa6:	e06b      	b.n	8008080 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	2b05      	cmp	r3, #5
 8007fac:	d168      	bne.n	8008080 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb2:	e065      	b.n	8008080 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	795b      	ldrb	r3, [r3, #5]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	9200      	str	r2, [sp, #0]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f87f 	bl	80080c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	220a      	movs	r2, #10
 8007fd6:	761a      	strb	r2, [r3, #24]
      break;
 8007fd8:	e055      	b.n	8008086 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	795b      	ldrb	r3, [r3, #5]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fbe1 	bl	80087a8 <USBH_LL_GetURBState>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d105      	bne.n	8007ffc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	220d      	movs	r2, #13
 8007ff8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ffa:	e043      	b.n	8008084 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d103      	bne.n	800800a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2209      	movs	r2, #9
 8008006:	761a      	strb	r2, [r3, #24]
      break;
 8008008:	e03c      	b.n	8008084 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800800a:	7bbb      	ldrb	r3, [r7, #14]
 800800c:	2b04      	cmp	r3, #4
 800800e:	d139      	bne.n	8008084 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	220b      	movs	r2, #11
 8008014:	761a      	strb	r2, [r3, #24]
      break;
 8008016:	e035      	b.n	8008084 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	7e5b      	ldrb	r3, [r3, #25]
 800801c:	3301      	adds	r3, #1
 800801e:	b2da      	uxtb	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	765a      	strb	r2, [r3, #25]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	7e5b      	ldrb	r3, [r3, #25]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d806      	bhi.n	800803a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008038:	e025      	b.n	8008086 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008040:	2106      	movs	r1, #6
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	795b      	ldrb	r3, [r3, #5]
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f90c 	bl	8008270 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	791b      	ldrb	r3, [r3, #4]
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f906 	bl	8008270 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800806a:	2302      	movs	r3, #2
 800806c:	73fb      	strb	r3, [r7, #15]
      break;
 800806e:	e00a      	b.n	8008086 <USBH_HandleControl+0x2de>

    default:
      break;
 8008070:	bf00      	nop
 8008072:	e008      	b.n	8008086 <USBH_HandleControl+0x2de>
      break;
 8008074:	bf00      	nop
 8008076:	e006      	b.n	8008086 <USBH_HandleControl+0x2de>
      break;
 8008078:	bf00      	nop
 800807a:	e004      	b.n	8008086 <USBH_HandleControl+0x2de>
      break;
 800807c:	bf00      	nop
 800807e:	e002      	b.n	8008086 <USBH_HandleControl+0x2de>
      break;
 8008080:	bf00      	nop
 8008082:	e000      	b.n	8008086 <USBH_HandleControl+0x2de>
      break;
 8008084:	bf00      	nop
  }

  return status;
 8008086:	7bfb      	ldrb	r3, [r7, #15]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af04      	add	r7, sp, #16
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	4613      	mov	r3, r2
 800809c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800809e:	79f9      	ldrb	r1, [r7, #7]
 80080a0:	2300      	movs	r3, #0
 80080a2:	9303      	str	r3, [sp, #12]
 80080a4:	2308      	movs	r3, #8
 80080a6:	9302      	str	r3, [sp, #8]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	2300      	movs	r3, #0
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	2300      	movs	r3, #0
 80080b2:	2200      	movs	r2, #0
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f000 fb46 	bl	8008746 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af04      	add	r7, sp, #16
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4611      	mov	r1, r2
 80080d0:	461a      	mov	r2, r3
 80080d2:	460b      	mov	r3, r1
 80080d4:	80fb      	strh	r3, [r7, #6]
 80080d6:	4613      	mov	r3, r2
 80080d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080e8:	7979      	ldrb	r1, [r7, #5]
 80080ea:	7e3b      	ldrb	r3, [r7, #24]
 80080ec:	9303      	str	r3, [sp, #12]
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	2301      	movs	r3, #1
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	2300      	movs	r3, #0
 80080fc:	2200      	movs	r2, #0
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 fb21 	bl	8008746 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b088      	sub	sp, #32
 8008112:	af04      	add	r7, sp, #16
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	4611      	mov	r1, r2
 800811a:	461a      	mov	r2, r3
 800811c:	460b      	mov	r3, r1
 800811e:	80fb      	strh	r3, [r7, #6]
 8008120:	4613      	mov	r3, r2
 8008122:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008124:	7979      	ldrb	r1, [r7, #5]
 8008126:	2300      	movs	r3, #0
 8008128:	9303      	str	r3, [sp, #12]
 800812a:	88fb      	ldrh	r3, [r7, #6]
 800812c:	9302      	str	r3, [sp, #8]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	2301      	movs	r3, #1
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	2300      	movs	r3, #0
 8008138:	2201      	movs	r2, #1
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 fb03 	bl	8008746 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008140:	2300      	movs	r3, #0

}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b088      	sub	sp, #32
 800814e:	af04      	add	r7, sp, #16
 8008150:	60f8      	str	r0, [r7, #12]
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	4611      	mov	r1, r2
 8008156:	461a      	mov	r2, r3
 8008158:	460b      	mov	r3, r1
 800815a:	80fb      	strh	r3, [r7, #6]
 800815c:	4613      	mov	r3, r2
 800815e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800816e:	7979      	ldrb	r1, [r7, #5]
 8008170:	7e3b      	ldrb	r3, [r7, #24]
 8008172:	9303      	str	r3, [sp, #12]
 8008174:	88fb      	ldrh	r3, [r7, #6]
 8008176:	9302      	str	r3, [sp, #8]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	2301      	movs	r3, #1
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	2302      	movs	r3, #2
 8008182:	2200      	movs	r2, #0
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fade 	bl	8008746 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af04      	add	r7, sp, #16
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4611      	mov	r1, r2
 80081a0:	461a      	mov	r2, r3
 80081a2:	460b      	mov	r3, r1
 80081a4:	80fb      	strh	r3, [r7, #6]
 80081a6:	4613      	mov	r3, r2
 80081a8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081aa:	7979      	ldrb	r1, [r7, #5]
 80081ac:	2300      	movs	r3, #0
 80081ae:	9303      	str	r3, [sp, #12]
 80081b0:	88fb      	ldrh	r3, [r7, #6]
 80081b2:	9302      	str	r3, [sp, #8]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	2301      	movs	r3, #1
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	2302      	movs	r3, #2
 80081be:	2201      	movs	r2, #1
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 fac0 	bl	8008746 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af04      	add	r7, sp, #16
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	4608      	mov	r0, r1
 80081da:	4611      	mov	r1, r2
 80081dc:	461a      	mov	r2, r3
 80081de:	4603      	mov	r3, r0
 80081e0:	70fb      	strb	r3, [r7, #3]
 80081e2:	460b      	mov	r3, r1
 80081e4:	70bb      	strb	r3, [r7, #2]
 80081e6:	4613      	mov	r3, r2
 80081e8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80081ea:	7878      	ldrb	r0, [r7, #1]
 80081ec:	78ba      	ldrb	r2, [r7, #2]
 80081ee:	78f9      	ldrb	r1, [r7, #3]
 80081f0:	8b3b      	ldrh	r3, [r7, #24]
 80081f2:	9302      	str	r3, [sp, #8]
 80081f4:	7d3b      	ldrb	r3, [r7, #20]
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	7c3b      	ldrb	r3, [r7, #16]
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	4603      	mov	r3, r0
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fa53 	bl	80086aa <USBH_LL_OpenPipe>

  return USBH_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800821a:	78fb      	ldrb	r3, [r7, #3]
 800821c:	4619      	mov	r1, r3
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fa72 	bl	8008708 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	460b      	mov	r3, r1
 8008238:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f836 	bl	80082ac <USBH_GetFreePipe>
 8008240:	4603      	mov	r3, r0
 8008242:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008244:	89fb      	ldrh	r3, [r7, #14]
 8008246:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800824a:	4293      	cmp	r3, r2
 800824c:	d00a      	beq.n	8008264 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	89fb      	ldrh	r3, [r7, #14]
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	33e0      	adds	r3, #224	@ 0xe0
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	440b      	add	r3, r1
 8008262:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008264:	89fb      	ldrh	r3, [r7, #14]
 8008266:	b2db      	uxtb	r3, r3
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800827c:	78fb      	ldrb	r3, [r7, #3]
 800827e:	2b0f      	cmp	r3, #15
 8008280:	d80d      	bhi.n	800829e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008282:	78fb      	ldrb	r3, [r7, #3]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	33e0      	adds	r3, #224	@ 0xe0
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	33e0      	adds	r3, #224	@ 0xe0
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	440b      	add	r3, r1
 800829c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]
 80082bc:	e00f      	b.n	80082de <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80082be:	7bfb      	ldrb	r3, [r7, #15]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	33e0      	adds	r3, #224	@ 0xe0
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d102      	bne.n	80082d8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	e007      	b.n	80082e8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	3301      	adds	r3, #1
 80082dc:	73fb      	strb	r3, [r7, #15]
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	2b0f      	cmp	r3, #15
 80082e2:	d9ec      	bls.n	80082be <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80082e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80082f8:	2201      	movs	r2, #1
 80082fa:	490e      	ldr	r1, [pc, #56]	@ (8008334 <MX_USB_HOST_Init+0x40>)
 80082fc:	480e      	ldr	r0, [pc, #56]	@ (8008338 <MX_USB_HOST_Init+0x44>)
 80082fe:	f7fe fb15 	bl	800692c <USBH_Init>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008308:	f7f8 fb3e 	bl	8000988 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800830c:	490b      	ldr	r1, [pc, #44]	@ (800833c <MX_USB_HOST_Init+0x48>)
 800830e:	480a      	ldr	r0, [pc, #40]	@ (8008338 <MX_USB_HOST_Init+0x44>)
 8008310:	f7fe fbb9 	bl	8006a86 <USBH_RegisterClass>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800831a:	f7f8 fb35 	bl	8000988 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800831e:	4806      	ldr	r0, [pc, #24]	@ (8008338 <MX_USB_HOST_Init+0x44>)
 8008320:	f7fe fc3d 	bl	8006b9e <USBH_Start>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800832a:	f7f8 fb2d 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800832e:	bf00      	nop
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	08008355 	.word	0x08008355
 8008338:	20000194 	.word	0x20000194
 800833c:	2000000c 	.word	0x2000000c

08008340 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008344:	4802      	ldr	r0, [pc, #8]	@ (8008350 <MX_USB_HOST_Process+0x10>)
 8008346:	f7fe fc3b 	bl	8006bc0 <USBH_Process>
}
 800834a:	bf00      	nop
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20000194 	.word	0x20000194

08008354 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008360:	78fb      	ldrb	r3, [r7, #3]
 8008362:	3b01      	subs	r3, #1
 8008364:	2b04      	cmp	r3, #4
 8008366:	d819      	bhi.n	800839c <USBH_UserProcess+0x48>
 8008368:	a201      	add	r2, pc, #4	@ (adr r2, 8008370 <USBH_UserProcess+0x1c>)
 800836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836e:	bf00      	nop
 8008370:	0800839d 	.word	0x0800839d
 8008374:	0800838d 	.word	0x0800838d
 8008378:	0800839d 	.word	0x0800839d
 800837c:	08008395 	.word	0x08008395
 8008380:	08008385 	.word	0x08008385
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008384:	4b09      	ldr	r3, [pc, #36]	@ (80083ac <USBH_UserProcess+0x58>)
 8008386:	2203      	movs	r2, #3
 8008388:	701a      	strb	r2, [r3, #0]
  break;
 800838a:	e008      	b.n	800839e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800838c:	4b07      	ldr	r3, [pc, #28]	@ (80083ac <USBH_UserProcess+0x58>)
 800838e:	2202      	movs	r2, #2
 8008390:	701a      	strb	r2, [r3, #0]
  break;
 8008392:	e004      	b.n	800839e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008394:	4b05      	ldr	r3, [pc, #20]	@ (80083ac <USBH_UserProcess+0x58>)
 8008396:	2201      	movs	r2, #1
 8008398:	701a      	strb	r2, [r3, #0]
  break;
 800839a:	e000      	b.n	800839e <USBH_UserProcess+0x4a>

  default:
  break;
 800839c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	2000056c 	.word	0x2000056c

080083b0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08a      	sub	sp, #40	@ 0x28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083b8:	f107 0314 	add.w	r3, r7, #20
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	605a      	str	r2, [r3, #4]
 80083c2:	609a      	str	r2, [r3, #8]
 80083c4:	60da      	str	r2, [r3, #12]
 80083c6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083d0:	d147      	bne.n	8008462 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083d2:	2300      	movs	r3, #0
 80083d4:	613b      	str	r3, [r7, #16]
 80083d6:	4b25      	ldr	r3, [pc, #148]	@ (800846c <HAL_HCD_MspInit+0xbc>)
 80083d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083da:	4a24      	ldr	r2, [pc, #144]	@ (800846c <HAL_HCD_MspInit+0xbc>)
 80083dc:	f043 0301 	orr.w	r3, r3, #1
 80083e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80083e2:	4b22      	ldr	r3, [pc, #136]	@ (800846c <HAL_HCD_MspInit+0xbc>)
 80083e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	613b      	str	r3, [r7, #16]
 80083ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80083ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083f4:	2300      	movs	r3, #0
 80083f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80083fc:	f107 0314 	add.w	r3, r7, #20
 8008400:	4619      	mov	r1, r3
 8008402:	481b      	ldr	r0, [pc, #108]	@ (8008470 <HAL_HCD_MspInit+0xc0>)
 8008404:	f7f8 fe52 	bl	80010ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008408:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800840c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800840e:	2302      	movs	r3, #2
 8008410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008412:	2300      	movs	r3, #0
 8008414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008416:	2300      	movs	r3, #0
 8008418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800841a:	230a      	movs	r3, #10
 800841c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800841e:	f107 0314 	add.w	r3, r7, #20
 8008422:	4619      	mov	r1, r3
 8008424:	4812      	ldr	r0, [pc, #72]	@ (8008470 <HAL_HCD_MspInit+0xc0>)
 8008426:	f7f8 fe41 	bl	80010ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800842a:	4b10      	ldr	r3, [pc, #64]	@ (800846c <HAL_HCD_MspInit+0xbc>)
 800842c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800842e:	4a0f      	ldr	r2, [pc, #60]	@ (800846c <HAL_HCD_MspInit+0xbc>)
 8008430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008434:	6353      	str	r3, [r2, #52]	@ 0x34
 8008436:	2300      	movs	r3, #0
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	4b0c      	ldr	r3, [pc, #48]	@ (800846c <HAL_HCD_MspInit+0xbc>)
 800843c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800843e:	4a0b      	ldr	r2, [pc, #44]	@ (800846c <HAL_HCD_MspInit+0xbc>)
 8008440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008444:	6453      	str	r3, [r2, #68]	@ 0x44
 8008446:	4b09      	ldr	r3, [pc, #36]	@ (800846c <HAL_HCD_MspInit+0xbc>)
 8008448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800844a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008452:	2200      	movs	r2, #0
 8008454:	2100      	movs	r1, #0
 8008456:	2043      	movs	r0, #67	@ 0x43
 8008458:	f7f8 fdf1 	bl	800103e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800845c:	2043      	movs	r0, #67	@ 0x43
 800845e:	f7f8 fe0a 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008462:	bf00      	nop
 8008464:	3728      	adds	r7, #40	@ 0x28
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	40023800 	.word	0x40023800
 8008470:	40020000 	.word	0x40020000

08008474 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe ff73 	bl	800736e <USBH_LL_IncTimer>
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe ffab 	bl	80073fa <USBH_LL_Connect>
}
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe ffb4 	bl	8007428 <USBH_LL_Disconnect>
}
 80084c0:	bf00      	nop
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	70fb      	strb	r3, [r7, #3]
 80084d4:	4613      	mov	r3, r2
 80084d6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe ff65 	bl	80073c2 <USBH_LL_PortEnabled>
}
 80084f8:	bf00      	nop
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe ff65 	bl	80073de <USBH_LL_PortDisabled>
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800852a:	2b01      	cmp	r3, #1
 800852c:	d12a      	bne.n	8008584 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800852e:	4a18      	ldr	r2, [pc, #96]	@ (8008590 <USBH_LL_Init+0x74>)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a15      	ldr	r2, [pc, #84]	@ (8008590 <USBH_LL_Init+0x74>)
 800853a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800853e:	4b14      	ldr	r3, [pc, #80]	@ (8008590 <USBH_LL_Init+0x74>)
 8008540:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008544:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008546:	4b12      	ldr	r3, [pc, #72]	@ (8008590 <USBH_LL_Init+0x74>)
 8008548:	2208      	movs	r2, #8
 800854a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800854c:	4b10      	ldr	r3, [pc, #64]	@ (8008590 <USBH_LL_Init+0x74>)
 800854e:	2201      	movs	r2, #1
 8008550:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008552:	4b0f      	ldr	r3, [pc, #60]	@ (8008590 <USBH_LL_Init+0x74>)
 8008554:	2200      	movs	r2, #0
 8008556:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008558:	4b0d      	ldr	r3, [pc, #52]	@ (8008590 <USBH_LL_Init+0x74>)
 800855a:	2202      	movs	r2, #2
 800855c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800855e:	4b0c      	ldr	r3, [pc, #48]	@ (8008590 <USBH_LL_Init+0x74>)
 8008560:	2200      	movs	r2, #0
 8008562:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008564:	480a      	ldr	r0, [pc, #40]	@ (8008590 <USBH_LL_Init+0x74>)
 8008566:	f7f8 ff70 	bl	800144a <HAL_HCD_Init>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008570:	f7f8 fa0a 	bl	8000988 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008574:	4806      	ldr	r0, [pc, #24]	@ (8008590 <USBH_LL_Init+0x74>)
 8008576:	f7f9 fbd1 	bl	8001d1c <HAL_HCD_GetCurrentFrame>
 800857a:	4603      	mov	r3, r0
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7fe fee6 	bl	8007350 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20000570 	.word	0x20000570

08008594 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7f9 fb3e 	bl	8001c2c <HAL_HCD_Start>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 f95e 	bl	8008878 <USBH_Get_USB_Status>
 80085bc:	4603      	mov	r3, r0
 80085be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b084      	sub	sp, #16
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7f9 fb46 	bl	8001c72 <HAL_HCD_Stop>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 f943 	bl	8008878 <USBH_Get_USB_Status>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008608:	2301      	movs	r3, #1
 800860a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008612:	4618      	mov	r0, r3
 8008614:	f7f9 fb90 	bl	8001d38 <HAL_HCD_GetCurrentSpeed>
 8008618:	4603      	mov	r3, r0
 800861a:	2b02      	cmp	r3, #2
 800861c:	d00c      	beq.n	8008638 <USBH_LL_GetSpeed+0x38>
 800861e:	2b02      	cmp	r3, #2
 8008620:	d80d      	bhi.n	800863e <USBH_LL_GetSpeed+0x3e>
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <USBH_LL_GetSpeed+0x2c>
 8008626:	2b01      	cmp	r3, #1
 8008628:	d003      	beq.n	8008632 <USBH_LL_GetSpeed+0x32>
 800862a:	e008      	b.n	800863e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800862c:	2300      	movs	r3, #0
 800862e:	73fb      	strb	r3, [r7, #15]
    break;
 8008630:	e008      	b.n	8008644 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008632:	2301      	movs	r3, #1
 8008634:	73fb      	strb	r3, [r7, #15]
    break;
 8008636:	e005      	b.n	8008644 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008638:	2302      	movs	r3, #2
 800863a:	73fb      	strb	r3, [r7, #15]
    break;
 800863c:	e002      	b.n	8008644 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800863e:	2301      	movs	r3, #1
 8008640:	73fb      	strb	r3, [r7, #15]
    break;
 8008642:	bf00      	nop
  }
  return  speed;
 8008644:	7bfb      	ldrb	r3, [r7, #15]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b084      	sub	sp, #16
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008664:	4618      	mov	r0, r3
 8008666:	f7f9 fb21 	bl	8001cac <HAL_HCD_ResetPort>
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 f901 	bl	8008878 <USBH_Get_USB_Status>
 8008676:	4603      	mov	r3, r0
 8008678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800867a:	7bbb      	ldrb	r3, [r7, #14]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008696:	78fa      	ldrb	r2, [r7, #3]
 8008698:	4611      	mov	r1, r2
 800869a:	4618      	mov	r0, r3
 800869c:	f7f9 fb29 	bl	8001cf2 <HAL_HCD_HC_GetXferCount>
 80086a0:	4603      	mov	r3, r0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086aa:	b590      	push	{r4, r7, lr}
 80086ac:	b089      	sub	sp, #36	@ 0x24
 80086ae:	af04      	add	r7, sp, #16
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	4608      	mov	r0, r1
 80086b4:	4611      	mov	r1, r2
 80086b6:	461a      	mov	r2, r3
 80086b8:	4603      	mov	r3, r0
 80086ba:	70fb      	strb	r3, [r7, #3]
 80086bc:	460b      	mov	r3, r1
 80086be:	70bb      	strb	r3, [r7, #2]
 80086c0:	4613      	mov	r3, r2
 80086c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80086d2:	787c      	ldrb	r4, [r7, #1]
 80086d4:	78ba      	ldrb	r2, [r7, #2]
 80086d6:	78f9      	ldrb	r1, [r7, #3]
 80086d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80086da:	9302      	str	r3, [sp, #8]
 80086dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	4623      	mov	r3, r4
 80086ea:	f7f8 ff15 	bl	8001518 <HAL_HCD_HC_Init>
 80086ee:	4603      	mov	r3, r0
 80086f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 f8bf 	bl	8008878 <USBH_Get_USB_Status>
 80086fa:	4603      	mov	r3, r0
 80086fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	bd90      	pop	{r4, r7, pc}

08008708 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f7f8 ffae 	bl	8001688 <HAL_HCD_HC_Halt>
 800872c:	4603      	mov	r3, r0
 800872e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	4618      	mov	r0, r3
 8008734:	f000 f8a0 	bl	8008878 <USBH_Get_USB_Status>
 8008738:	4603      	mov	r3, r0
 800873a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800873c:	7bbb      	ldrb	r3, [r7, #14]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008746:	b590      	push	{r4, r7, lr}
 8008748:	b089      	sub	sp, #36	@ 0x24
 800874a:	af04      	add	r7, sp, #16
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	4608      	mov	r0, r1
 8008750:	4611      	mov	r1, r2
 8008752:	461a      	mov	r2, r3
 8008754:	4603      	mov	r3, r0
 8008756:	70fb      	strb	r3, [r7, #3]
 8008758:	460b      	mov	r3, r1
 800875a:	70bb      	strb	r3, [r7, #2]
 800875c:	4613      	mov	r3, r2
 800875e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800876e:	787c      	ldrb	r4, [r7, #1]
 8008770:	78ba      	ldrb	r2, [r7, #2]
 8008772:	78f9      	ldrb	r1, [r7, #3]
 8008774:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008778:	9303      	str	r3, [sp, #12]
 800877a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800877c:	9302      	str	r3, [sp, #8]
 800877e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	4623      	mov	r3, r4
 800878a:	f7f8 ffa1 	bl	80016d0 <HAL_HCD_HC_SubmitRequest>
 800878e:	4603      	mov	r3, r0
 8008790:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	4618      	mov	r0, r3
 8008796:	f000 f86f 	bl	8008878 <USBH_Get_USB_Status>
 800879a:	4603      	mov	r3, r0
 800879c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800879e:	7bbb      	ldrb	r3, [r7, #14]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd90      	pop	{r4, r7, pc}

080087a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087ba:	78fa      	ldrb	r2, [r7, #3]
 80087bc:	4611      	mov	r1, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	f7f9 fa82 	bl	8001cc8 <HAL_HCD_HC_GetURBState>
 80087c4:	4603      	mov	r3, r0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	460b      	mov	r3, r1
 80087d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d103      	bne.n	80087ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 f872 	bl	80088d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80087ec:	20c8      	movs	r0, #200	@ 0xc8
 80087ee:	f7f8 fb27 	bl	8000e40 <HAL_Delay>
  return USBH_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	70fb      	strb	r3, [r7, #3]
 8008808:	4613      	mov	r3, r2
 800880a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008812:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008814:	78fa      	ldrb	r2, [r7, #3]
 8008816:	68f9      	ldr	r1, [r7, #12]
 8008818:	4613      	mov	r3, r2
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	1a9b      	subs	r3, r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	3317      	adds	r3, #23
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800882a:	78fa      	ldrb	r2, [r7, #3]
 800882c:	68f9      	ldr	r1, [r7, #12]
 800882e:	4613      	mov	r3, r2
 8008830:	011b      	lsls	r3, r3, #4
 8008832:	1a9b      	subs	r3, r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	440b      	add	r3, r1
 8008838:	333c      	adds	r3, #60	@ 0x3c
 800883a:	78ba      	ldrb	r2, [r7, #2]
 800883c:	701a      	strb	r2, [r3, #0]
 800883e:	e009      	b.n	8008854 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008840:	78fa      	ldrb	r2, [r7, #3]
 8008842:	68f9      	ldr	r1, [r7, #12]
 8008844:	4613      	mov	r3, r2
 8008846:	011b      	lsls	r3, r3, #4
 8008848:	1a9b      	subs	r3, r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	440b      	add	r3, r1
 800884e:	333d      	adds	r3, #61	@ 0x3d
 8008850:	78ba      	ldrb	r2, [r7, #2]
 8008852:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7f8 fae8 	bl	8000e40 <HAL_Delay>
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	2b03      	cmp	r3, #3
 800888a:	d817      	bhi.n	80088bc <USBH_Get_USB_Status+0x44>
 800888c:	a201      	add	r2, pc, #4	@ (adr r2, 8008894 <USBH_Get_USB_Status+0x1c>)
 800888e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008892:	bf00      	nop
 8008894:	080088a5 	.word	0x080088a5
 8008898:	080088ab 	.word	0x080088ab
 800889c:	080088b1 	.word	0x080088b1
 80088a0:	080088b7 	.word	0x080088b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73fb      	strb	r3, [r7, #15]
    break;
 80088a8:	e00b      	b.n	80088c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80088aa:	2302      	movs	r3, #2
 80088ac:	73fb      	strb	r3, [r7, #15]
    break;
 80088ae:	e008      	b.n	80088c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80088b0:	2301      	movs	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]
    break;
 80088b4:	e005      	b.n	80088c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80088b6:	2302      	movs	r3, #2
 80088b8:	73fb      	strb	r3, [r7, #15]
    break;
 80088ba:	e002      	b.n	80088c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80088bc:	2302      	movs	r3, #2
 80088be:	73fb      	strb	r3, [r7, #15]
    break;
 80088c0:	bf00      	nop
  }
  return usb_status;
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d102      	bne.n	80088ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
 80088e8:	e001      	b.n	80088ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80088ea:	2301      	movs	r3, #1
 80088ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	461a      	mov	r2, r3
 80088f2:	2101      	movs	r1, #1
 80088f4:	4803      	ldr	r0, [pc, #12]	@ (8008904 <MX_DriverVbusFS+0x34>)
 80088f6:	f7f8 fd75 	bl	80013e4 <HAL_GPIO_WritePin>
}
 80088fa:	bf00      	nop
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	40020800 	.word	0x40020800

08008908 <malloc>:
 8008908:	4b02      	ldr	r3, [pc, #8]	@ (8008914 <malloc+0xc>)
 800890a:	4601      	mov	r1, r0
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	f000 b82d 	b.w	800896c <_malloc_r>
 8008912:	bf00      	nop
 8008914:	2000002c 	.word	0x2000002c

08008918 <free>:
 8008918:	4b02      	ldr	r3, [pc, #8]	@ (8008924 <free+0xc>)
 800891a:	4601      	mov	r1, r0
 800891c:	6818      	ldr	r0, [r3, #0]
 800891e:	f000 b8f5 	b.w	8008b0c <_free_r>
 8008922:	bf00      	nop
 8008924:	2000002c 	.word	0x2000002c

08008928 <sbrk_aligned>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	4e0f      	ldr	r6, [pc, #60]	@ (8008968 <sbrk_aligned+0x40>)
 800892c:	460c      	mov	r4, r1
 800892e:	6831      	ldr	r1, [r6, #0]
 8008930:	4605      	mov	r5, r0
 8008932:	b911      	cbnz	r1, 800893a <sbrk_aligned+0x12>
 8008934:	f000 f8ae 	bl	8008a94 <_sbrk_r>
 8008938:	6030      	str	r0, [r6, #0]
 800893a:	4621      	mov	r1, r4
 800893c:	4628      	mov	r0, r5
 800893e:	f000 f8a9 	bl	8008a94 <_sbrk_r>
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	d103      	bne.n	800894e <sbrk_aligned+0x26>
 8008946:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800894a:	4620      	mov	r0, r4
 800894c:	bd70      	pop	{r4, r5, r6, pc}
 800894e:	1cc4      	adds	r4, r0, #3
 8008950:	f024 0403 	bic.w	r4, r4, #3
 8008954:	42a0      	cmp	r0, r4
 8008956:	d0f8      	beq.n	800894a <sbrk_aligned+0x22>
 8008958:	1a21      	subs	r1, r4, r0
 800895a:	4628      	mov	r0, r5
 800895c:	f000 f89a 	bl	8008a94 <_sbrk_r>
 8008960:	3001      	adds	r0, #1
 8008962:	d1f2      	bne.n	800894a <sbrk_aligned+0x22>
 8008964:	e7ef      	b.n	8008946 <sbrk_aligned+0x1e>
 8008966:	bf00      	nop
 8008968:	20000950 	.word	0x20000950

0800896c <_malloc_r>:
 800896c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008970:	1ccd      	adds	r5, r1, #3
 8008972:	f025 0503 	bic.w	r5, r5, #3
 8008976:	3508      	adds	r5, #8
 8008978:	2d0c      	cmp	r5, #12
 800897a:	bf38      	it	cc
 800897c:	250c      	movcc	r5, #12
 800897e:	2d00      	cmp	r5, #0
 8008980:	4606      	mov	r6, r0
 8008982:	db01      	blt.n	8008988 <_malloc_r+0x1c>
 8008984:	42a9      	cmp	r1, r5
 8008986:	d904      	bls.n	8008992 <_malloc_r+0x26>
 8008988:	230c      	movs	r3, #12
 800898a:	6033      	str	r3, [r6, #0]
 800898c:	2000      	movs	r0, #0
 800898e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008992:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a68 <_malloc_r+0xfc>
 8008996:	f000 f869 	bl	8008a6c <__malloc_lock>
 800899a:	f8d8 3000 	ldr.w	r3, [r8]
 800899e:	461c      	mov	r4, r3
 80089a0:	bb44      	cbnz	r4, 80089f4 <_malloc_r+0x88>
 80089a2:	4629      	mov	r1, r5
 80089a4:	4630      	mov	r0, r6
 80089a6:	f7ff ffbf 	bl	8008928 <sbrk_aligned>
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	4604      	mov	r4, r0
 80089ae:	d158      	bne.n	8008a62 <_malloc_r+0xf6>
 80089b0:	f8d8 4000 	ldr.w	r4, [r8]
 80089b4:	4627      	mov	r7, r4
 80089b6:	2f00      	cmp	r7, #0
 80089b8:	d143      	bne.n	8008a42 <_malloc_r+0xd6>
 80089ba:	2c00      	cmp	r4, #0
 80089bc:	d04b      	beq.n	8008a56 <_malloc_r+0xea>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	4639      	mov	r1, r7
 80089c2:	4630      	mov	r0, r6
 80089c4:	eb04 0903 	add.w	r9, r4, r3
 80089c8:	f000 f864 	bl	8008a94 <_sbrk_r>
 80089cc:	4581      	cmp	r9, r0
 80089ce:	d142      	bne.n	8008a56 <_malloc_r+0xea>
 80089d0:	6821      	ldr	r1, [r4, #0]
 80089d2:	1a6d      	subs	r5, r5, r1
 80089d4:	4629      	mov	r1, r5
 80089d6:	4630      	mov	r0, r6
 80089d8:	f7ff ffa6 	bl	8008928 <sbrk_aligned>
 80089dc:	3001      	adds	r0, #1
 80089de:	d03a      	beq.n	8008a56 <_malloc_r+0xea>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	442b      	add	r3, r5
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	f8d8 3000 	ldr.w	r3, [r8]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	bb62      	cbnz	r2, 8008a48 <_malloc_r+0xdc>
 80089ee:	f8c8 7000 	str.w	r7, [r8]
 80089f2:	e00f      	b.n	8008a14 <_malloc_r+0xa8>
 80089f4:	6822      	ldr	r2, [r4, #0]
 80089f6:	1b52      	subs	r2, r2, r5
 80089f8:	d420      	bmi.n	8008a3c <_malloc_r+0xd0>
 80089fa:	2a0b      	cmp	r2, #11
 80089fc:	d917      	bls.n	8008a2e <_malloc_r+0xc2>
 80089fe:	1961      	adds	r1, r4, r5
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	6025      	str	r5, [r4, #0]
 8008a04:	bf18      	it	ne
 8008a06:	6059      	strne	r1, [r3, #4]
 8008a08:	6863      	ldr	r3, [r4, #4]
 8008a0a:	bf08      	it	eq
 8008a0c:	f8c8 1000 	streq.w	r1, [r8]
 8008a10:	5162      	str	r2, [r4, r5]
 8008a12:	604b      	str	r3, [r1, #4]
 8008a14:	4630      	mov	r0, r6
 8008a16:	f000 f82f 	bl	8008a78 <__malloc_unlock>
 8008a1a:	f104 000b 	add.w	r0, r4, #11
 8008a1e:	1d23      	adds	r3, r4, #4
 8008a20:	f020 0007 	bic.w	r0, r0, #7
 8008a24:	1ac2      	subs	r2, r0, r3
 8008a26:	bf1c      	itt	ne
 8008a28:	1a1b      	subne	r3, r3, r0
 8008a2a:	50a3      	strne	r3, [r4, r2]
 8008a2c:	e7af      	b.n	800898e <_malloc_r+0x22>
 8008a2e:	6862      	ldr	r2, [r4, #4]
 8008a30:	42a3      	cmp	r3, r4
 8008a32:	bf0c      	ite	eq
 8008a34:	f8c8 2000 	streq.w	r2, [r8]
 8008a38:	605a      	strne	r2, [r3, #4]
 8008a3a:	e7eb      	b.n	8008a14 <_malloc_r+0xa8>
 8008a3c:	4623      	mov	r3, r4
 8008a3e:	6864      	ldr	r4, [r4, #4]
 8008a40:	e7ae      	b.n	80089a0 <_malloc_r+0x34>
 8008a42:	463c      	mov	r4, r7
 8008a44:	687f      	ldr	r7, [r7, #4]
 8008a46:	e7b6      	b.n	80089b6 <_malloc_r+0x4a>
 8008a48:	461a      	mov	r2, r3
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	d1fb      	bne.n	8008a48 <_malloc_r+0xdc>
 8008a50:	2300      	movs	r3, #0
 8008a52:	6053      	str	r3, [r2, #4]
 8008a54:	e7de      	b.n	8008a14 <_malloc_r+0xa8>
 8008a56:	230c      	movs	r3, #12
 8008a58:	6033      	str	r3, [r6, #0]
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f000 f80c 	bl	8008a78 <__malloc_unlock>
 8008a60:	e794      	b.n	800898c <_malloc_r+0x20>
 8008a62:	6005      	str	r5, [r0, #0]
 8008a64:	e7d6      	b.n	8008a14 <_malloc_r+0xa8>
 8008a66:	bf00      	nop
 8008a68:	20000954 	.word	0x20000954

08008a6c <__malloc_lock>:
 8008a6c:	4801      	ldr	r0, [pc, #4]	@ (8008a74 <__malloc_lock+0x8>)
 8008a6e:	f000 b84b 	b.w	8008b08 <__retarget_lock_acquire_recursive>
 8008a72:	bf00      	nop
 8008a74:	20000a94 	.word	0x20000a94

08008a78 <__malloc_unlock>:
 8008a78:	4801      	ldr	r0, [pc, #4]	@ (8008a80 <__malloc_unlock+0x8>)
 8008a7a:	f000 b846 	b.w	8008b0a <__retarget_lock_release_recursive>
 8008a7e:	bf00      	nop
 8008a80:	20000a94 	.word	0x20000a94

08008a84 <memset>:
 8008a84:	4402      	add	r2, r0
 8008a86:	4603      	mov	r3, r0
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d100      	bne.n	8008a8e <memset+0xa>
 8008a8c:	4770      	bx	lr
 8008a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a92:	e7f9      	b.n	8008a88 <memset+0x4>

08008a94 <_sbrk_r>:
 8008a94:	b538      	push	{r3, r4, r5, lr}
 8008a96:	4d06      	ldr	r5, [pc, #24]	@ (8008ab0 <_sbrk_r+0x1c>)
 8008a98:	2300      	movs	r3, #0
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	602b      	str	r3, [r5, #0]
 8008aa0:	f7f8 f8ea 	bl	8000c78 <_sbrk>
 8008aa4:	1c43      	adds	r3, r0, #1
 8008aa6:	d102      	bne.n	8008aae <_sbrk_r+0x1a>
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	b103      	cbz	r3, 8008aae <_sbrk_r+0x1a>
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	20000a90 	.word	0x20000a90

08008ab4 <__errno>:
 8008ab4:	4b01      	ldr	r3, [pc, #4]	@ (8008abc <__errno+0x8>)
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	2000002c 	.word	0x2000002c

08008ac0 <__libc_init_array>:
 8008ac0:	b570      	push	{r4, r5, r6, lr}
 8008ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8008af8 <__libc_init_array+0x38>)
 8008ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8008afc <__libc_init_array+0x3c>)
 8008ac6:	1b64      	subs	r4, r4, r5
 8008ac8:	10a4      	asrs	r4, r4, #2
 8008aca:	2600      	movs	r6, #0
 8008acc:	42a6      	cmp	r6, r4
 8008ace:	d109      	bne.n	8008ae4 <__libc_init_array+0x24>
 8008ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8008b00 <__libc_init_array+0x40>)
 8008ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8008b04 <__libc_init_array+0x44>)
 8008ad4:	f000 f864 	bl	8008ba0 <_init>
 8008ad8:	1b64      	subs	r4, r4, r5
 8008ada:	10a4      	asrs	r4, r4, #2
 8008adc:	2600      	movs	r6, #0
 8008ade:	42a6      	cmp	r6, r4
 8008ae0:	d105      	bne.n	8008aee <__libc_init_array+0x2e>
 8008ae2:	bd70      	pop	{r4, r5, r6, pc}
 8008ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae8:	4798      	blx	r3
 8008aea:	3601      	adds	r6, #1
 8008aec:	e7ee      	b.n	8008acc <__libc_init_array+0xc>
 8008aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af2:	4798      	blx	r3
 8008af4:	3601      	adds	r6, #1
 8008af6:	e7f2      	b.n	8008ade <__libc_init_array+0x1e>
 8008af8:	08008bdc 	.word	0x08008bdc
 8008afc:	08008bdc 	.word	0x08008bdc
 8008b00:	08008bdc 	.word	0x08008bdc
 8008b04:	08008be0 	.word	0x08008be0

08008b08 <__retarget_lock_acquire_recursive>:
 8008b08:	4770      	bx	lr

08008b0a <__retarget_lock_release_recursive>:
 8008b0a:	4770      	bx	lr

08008b0c <_free_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4605      	mov	r5, r0
 8008b10:	2900      	cmp	r1, #0
 8008b12:	d041      	beq.n	8008b98 <_free_r+0x8c>
 8008b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b18:	1f0c      	subs	r4, r1, #4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	bfb8      	it	lt
 8008b1e:	18e4      	addlt	r4, r4, r3
 8008b20:	f7ff ffa4 	bl	8008a6c <__malloc_lock>
 8008b24:	4a1d      	ldr	r2, [pc, #116]	@ (8008b9c <_free_r+0x90>)
 8008b26:	6813      	ldr	r3, [r2, #0]
 8008b28:	b933      	cbnz	r3, 8008b38 <_free_r+0x2c>
 8008b2a:	6063      	str	r3, [r4, #4]
 8008b2c:	6014      	str	r4, [r2, #0]
 8008b2e:	4628      	mov	r0, r5
 8008b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b34:	f7ff bfa0 	b.w	8008a78 <__malloc_unlock>
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	d908      	bls.n	8008b4e <_free_r+0x42>
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	1821      	adds	r1, r4, r0
 8008b40:	428b      	cmp	r3, r1
 8008b42:	bf01      	itttt	eq
 8008b44:	6819      	ldreq	r1, [r3, #0]
 8008b46:	685b      	ldreq	r3, [r3, #4]
 8008b48:	1809      	addeq	r1, r1, r0
 8008b4a:	6021      	streq	r1, [r4, #0]
 8008b4c:	e7ed      	b.n	8008b2a <_free_r+0x1e>
 8008b4e:	461a      	mov	r2, r3
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	b10b      	cbz	r3, 8008b58 <_free_r+0x4c>
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	d9fa      	bls.n	8008b4e <_free_r+0x42>
 8008b58:	6811      	ldr	r1, [r2, #0]
 8008b5a:	1850      	adds	r0, r2, r1
 8008b5c:	42a0      	cmp	r0, r4
 8008b5e:	d10b      	bne.n	8008b78 <_free_r+0x6c>
 8008b60:	6820      	ldr	r0, [r4, #0]
 8008b62:	4401      	add	r1, r0
 8008b64:	1850      	adds	r0, r2, r1
 8008b66:	4283      	cmp	r3, r0
 8008b68:	6011      	str	r1, [r2, #0]
 8008b6a:	d1e0      	bne.n	8008b2e <_free_r+0x22>
 8008b6c:	6818      	ldr	r0, [r3, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	6053      	str	r3, [r2, #4]
 8008b72:	4408      	add	r0, r1
 8008b74:	6010      	str	r0, [r2, #0]
 8008b76:	e7da      	b.n	8008b2e <_free_r+0x22>
 8008b78:	d902      	bls.n	8008b80 <_free_r+0x74>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	602b      	str	r3, [r5, #0]
 8008b7e:	e7d6      	b.n	8008b2e <_free_r+0x22>
 8008b80:	6820      	ldr	r0, [r4, #0]
 8008b82:	1821      	adds	r1, r4, r0
 8008b84:	428b      	cmp	r3, r1
 8008b86:	bf04      	itt	eq
 8008b88:	6819      	ldreq	r1, [r3, #0]
 8008b8a:	685b      	ldreq	r3, [r3, #4]
 8008b8c:	6063      	str	r3, [r4, #4]
 8008b8e:	bf04      	itt	eq
 8008b90:	1809      	addeq	r1, r1, r0
 8008b92:	6021      	streq	r1, [r4, #0]
 8008b94:	6054      	str	r4, [r2, #4]
 8008b96:	e7ca      	b.n	8008b2e <_free_r+0x22>
 8008b98:	bd38      	pop	{r3, r4, r5, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20000954 	.word	0x20000954

08008ba0 <_init>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	bf00      	nop
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr

08008bac <_fini>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	bf00      	nop
 8008bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb2:	bc08      	pop	{r3}
 8008bb4:	469e      	mov	lr, r3
 8008bb6:	4770      	bx	lr
